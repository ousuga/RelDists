[{"path":"http://ousuga.github.io/RelDists/articles/FWE_distribution.html","id":"flexible-weibull-extension-distribution","dir":"Articles","previous_headings":"","what":"Flexible Weibull extension distribution","title":"FWE distribution","text":"distribution proposed Bebbington (2007). probability density function \\(f(x)\\) cumulative density function \\(F(x)\\) given : \\[f(x) = \\left( \\mu+ \\frac{\\sigma}{x^2} \\right) e^{\\mu x - \\sigma / x} \\exp \\left( -e^{\\mu x - \\sigma / x} \\right),\\] \\[F(x) = 1 - \\exp[-e^{\\mu x - \\sigma / x}], \\quad x > 0.\\] respectively, \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(x > 0\\). Next figure shows possible shapes \\(f(x)\\) \\(F(x)\\) several values parameters.","code":""},{"path":"http://ousuga.github.io/RelDists/articles/OW_distribution.html","id":"odd-weibull-distribution","dir":"Articles","previous_headings":"","what":"Odd Weibull distribution","title":"OW distribution","text":"distribution proposed Cooray (2006). probability density function \\(f(x)\\) cumulative density function \\(F(x)\\) given : \\[f(x) = \\left( \\frac{\\sigma\\nu}{x} \\right) (\\mu x)^\\sigma e^{(\\mu x)^\\sigma} \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^{\\nu-1} \\left[ 1 + \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^\\nu \\right]^{-2},\\] \\[F(x) = 1 - \\left[ 1 + \\left( e^{(\\mu x)^{\\sigma}} - 1 \\right)^\\nu \\right]^{-1}, \\quad x>0,\\] respectively, \\(\\mu>0, \\quad \\sigma\\nu>0\\). \\(\\mu\\) scale parameter, \\(\\sigma\\) \\(\\nu\\) shape parameters. Next figure shows possible shapes \\(f(x)\\) \\(F(x)\\) several values parameters.  hazard function (hf) OW distribution : \\[h(x) = \\left( \\frac{\\sigma\\nu}{x} \\right) (\\mu x)^\\sigma e^{(\\mu x)^\\sigma} \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^{\\nu-1} \\left[ 1 + \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^\\nu \\right]^{-1}, x>0,\\] hf can take following shapes: Increasing \\(\\sigma>1\\) \\(\\sigma\\nu>1\\). Decreasing \\(\\sigma<1\\) \\(\\sigma\\nu<1\\). Unimodal shaped either \\(\\sigma<0\\) \\(\\nu<0\\) \\(\\sigma<1\\) \\(\\sigma\\nu\\geq 1\\). Bathtub shaped \\(\\sigma>1\\) \\(\\sigma\\nu\\geq 1\\). figure shows possible shapes hf mentioned :  following figure illustrate regions corresponding different hazard shapes:","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/articles/OW_distribution.html","id":"time-to-failure-on-electronic-equipment","dir":"Articles","previous_headings":"Application examples","what":"Time to failure on electronic equipment","title":"OW distribution","text":"Cooray (2015) used following data provided Wang (2000) order fit OW distribution maximum likelihood estimation (MLE): 5, 11, 21, 31, 46, 75, 98, 122, 145, 165, 195, 224, 245, 293, 321, 330, 350, 420. data time failure electronic device hours. alternative classical MLE, used function fit -intercept model order estimate parameters OW distribution without covariates. Using initValuesOW(), can obtain initial guess valid region. initValuesOW() function detected Bathtub hazard shape, corresponds convex--concave shape total time test (TTT) plot  Therefore, define search region according initValuesOW() outputs perform fit using gamlss() following table summarize results compare gotten Cooray (2015)","code":"data(\"equipment\") my_initial_guess <- initValuesOW(formula = equipment ~ 1)  summary(my_initial_guess) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 5 #> nu = 0.1 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu < 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Bathtub old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  par(mar = c(3.7, 3.7, 1, 10), mgp = c(2.5, 1, 0)) plot(my_initial_guess, las = 1) legend.HazardShape(x = 1.07, y = 1.04, xpd = TRUE) par(old_par) # restore previous graphical parameters # Custom search region myvalues <- list(sigma = \"all(sigma > 1)\",                  nu = \"all(nu < 1/sigma)\") # gamlss set up con.out <-gamlss.control(n.cyc = 300, trace=TRUE) myOW <- myOW_region(family = OW(sigma.link='identity'),                     valid.values = myvalues, initVal = my_initial_guess)  param_ee <- gamlss(equipment ~ 1, sigma.fo = ~ 1, nu.fo = ~ 1,                     sigma.start = 5, nu.start = 0.1,                    control = con.out, family = myOW) #> GAMLSS-RS iteration 1: Global Deviance = 220.3699  #> GAMLSS-RS iteration 2: Global Deviance = 218.2162  #> GAMLSS-RS iteration 3: Global Deviance = 217.5282  #> GAMLSS-RS iteration 4: Global Deviance = 217.3291  #> GAMLSS-RS iteration 5: Global Deviance = 217.2142  #> GAMLSS-RS iteration 6: Global Deviance = 217.1047  #> GAMLSS-RS iteration 7: Global Deviance = 216.9932  #> GAMLSS-RS iteration 8: Global Deviance = 216.8872  #> GAMLSS-RS iteration 9: Global Deviance = 216.7914  #> GAMLSS-RS iteration 10: Global Deviance = 216.707  #> GAMLSS-RS iteration 11: Global Deviance = 216.6337  #> GAMLSS-RS iteration 12: Global Deviance = 216.5706  #> GAMLSS-RS iteration 13: Global Deviance = 216.5168  #> GAMLSS-RS iteration 14: Global Deviance = 216.471  #> GAMLSS-RS iteration 15: Global Deviance = 216.4324  #> GAMLSS-RS iteration 16: Global Deviance = 216.3997  #> GAMLSS-RS iteration 17: Global Deviance = 216.3723  #> GAMLSS-RS iteration 18: Global Deviance = 216.3492  #> GAMLSS-RS iteration 19: Global Deviance = 216.3299  #> GAMLSS-RS iteration 20: Global Deviance = 216.3136  #> GAMLSS-RS iteration 21: Global Deviance = 216.3  #> GAMLSS-RS iteration 22: Global Deviance = 216.2885  #> GAMLSS-RS iteration 23: Global Deviance = 216.2789  #> GAMLSS-RS iteration 24: Global Deviance = 216.2708  #> GAMLSS-RS iteration 25: Global Deviance = 216.264  #> GAMLSS-RS iteration 26: Global Deviance = 216.2583  #> GAMLSS-RS iteration 27: Global Deviance = 216.2533  #> GAMLSS-RS iteration 28: Global Deviance = 216.2488  #> GAMLSS-RS iteration 29: Global Deviance = 216.245  #> GAMLSS-RS iteration 30: Global Deviance = 216.2418  #> GAMLSS-RS iteration 31: Global Deviance = 216.2391  #> GAMLSS-RS iteration 32: Global Deviance = 216.2369  #> GAMLSS-RS iteration 33: Global Deviance = 216.2351  #> GAMLSS-RS iteration 34: Global Deviance = 216.2336  #> GAMLSS-RS iteration 35: Global Deviance = 216.232  #> GAMLSS-RS iteration 36: Global Deviance = 216.2306  #> GAMLSS-RS iteration 37: Global Deviance = 216.2294  #> GAMLSS-RS iteration 38: Global Deviance = 216.2284 summary(param_ee) #> ****************************************************************** #> Family:  c(\"OW\", \"Odd Weibull\")  #>  #> Call:  gamlss(formula = equipment ~ 1, sigma.formula = ~1,   #>     nu.formula = ~1, family = myOW, sigma.start = 5,   #>     nu.start = 0.1, control = con.out)  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   -5.240      0.205  -25.56 8.79e-14 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  identity #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)    3.283      1.423   2.307   0.0357 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Nu link function:  log  #> Nu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -1.2715     0.5019  -2.534   0.0229 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  18  #> Degrees of Freedom for the fit:  3 #>       Residual Deg. of Freedom:  15  #>                       at cycle:  38  #>   #> Global Deviance:     216.2284  #>             AIC:     222.2284  #>             SBC:     224.8996  #> ******************************************************************"},{"path":"http://ousuga.github.io/RelDists/articles/OW_distribution.html","id":"mortality-in-mice-exposed-to-radiation","dir":"Articles","previous_headings":"Application examples","what":"Mortality in mice exposed to radiation","title":"OW distribution","text":"Cooray (2006) used dataset 208 data points provided Kimball (1960) ages death weeks male mice exposed 240r gamma radiation. , implement workflow parameter estimation myOW_region gamlss functions. initValuesOW() function identified increasing hazard shape, well stated Cooray (2006), TTT plot concave.  Hence, implement estimation procedure , report results compare Cooray (2006)","code":"# Do not forget to load 'RelDists' package data(\"mice\") init_vals <- initValuesOW(formula = mice ~ 1)  summary(init_vals) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 2 #> nu = 6 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu > 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Increasing old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  par(mar = c(3.7, 3.7, 1, 10), mgp = c(2.5, 1, 0)) plot(init_vals, las = 1) legend.HazardShape(x = 1.07, y = 1.04, xpd = TRUE) par(old_par) # restore previous graphical parameters # gamlss set up myOW <- myOW_region(initVal = init_vals)  # Custom search region # Do not forget to load 'gamlss' library param_mm <- gamlss(mice ~ 1, sigma.fo = ~ 1, nu.fo = ~ 1,                    sigma.start = 2, nu.start = 6,                    control = con.out,                    family = myOW) #> GAMLSS-RS iteration 1: Global Deviance = 2031.511  #> GAMLSS-RS iteration 2: Global Deviance = 2006.257  #> GAMLSS-RS iteration 3: Global Deviance = 2005.168  #> GAMLSS-RS iteration 4: Global Deviance = 2005.063  #> GAMLSS-RS iteration 5: Global Deviance = 2004.941  #> GAMLSS-RS iteration 6: Global Deviance = 2004.817  #> GAMLSS-RS iteration 7: Global Deviance = 2004.69  #> GAMLSS-RS iteration 8: Global Deviance = 2004.558  #> GAMLSS-RS iteration 9: Global Deviance = 2004.423  #> GAMLSS-RS iteration 10: Global Deviance = 2004.283  #> GAMLSS-RS iteration 11: Global Deviance = 2004.139  #> GAMLSS-RS iteration 12: Global Deviance = 2003.991  #> GAMLSS-RS iteration 13: Global Deviance = 2003.838  #> GAMLSS-RS iteration 14: Global Deviance = 2003.68  #> GAMLSS-RS iteration 15: Global Deviance = 2003.517  #> GAMLSS-RS iteration 16: Global Deviance = 2003.348  #> GAMLSS-RS iteration 17: Global Deviance = 2003.174  #> GAMLSS-RS iteration 18: Global Deviance = 2002.993  #> GAMLSS-RS iteration 19: Global Deviance = 2002.807  #> GAMLSS-RS iteration 20: Global Deviance = 2002.613  #> GAMLSS-RS iteration 21: Global Deviance = 2002.413  #> GAMLSS-RS iteration 22: Global Deviance = 2002.205  #> GAMLSS-RS iteration 23: Global Deviance = 2001.989  #> GAMLSS-RS iteration 24: Global Deviance = 2001.766  #> GAMLSS-RS iteration 25: Global Deviance = 2001.533  #> GAMLSS-RS iteration 26: Global Deviance = 2001.292  #> GAMLSS-RS iteration 27: Global Deviance = 2001.041  #> GAMLSS-RS iteration 28: Global Deviance = 2000.78  #> GAMLSS-RS iteration 29: Global Deviance = 2000.507  #> GAMLSS-RS iteration 30: Global Deviance = 2000.224  #> GAMLSS-RS iteration 31: Global Deviance = 1999.929  #> GAMLSS-RS iteration 32: Global Deviance = 1999.621  #> GAMLSS-RS iteration 33: Global Deviance = 1999.299  #> GAMLSS-RS iteration 34: Global Deviance = 1998.964  #> GAMLSS-RS iteration 35: Global Deviance = 1998.613  #> GAMLSS-RS iteration 36: Global Deviance = 1998.247  #> GAMLSS-RS iteration 37: Global Deviance = 1997.864  #> GAMLSS-RS iteration 38: Global Deviance = 1997.463  #> GAMLSS-RS iteration 39: Global Deviance = 1997.037  #> GAMLSS-RS iteration 40: Global Deviance = 1996.591  #> GAMLSS-RS iteration 41: Global Deviance = 1996.124  #> GAMLSS-RS iteration 42: Global Deviance = 1995.634  #> GAMLSS-RS iteration 43: Global Deviance = 1995.121  #> GAMLSS-RS iteration 44: Global Deviance = 1994.584  #> GAMLSS-RS iteration 45: Global Deviance = 1994.022  #> GAMLSS-RS iteration 46: Global Deviance = 1993.434  #> GAMLSS-RS iteration 47: Global Deviance = 1992.822  #> GAMLSS-RS iteration 48: Global Deviance = 1992.183  #> GAMLSS-RS iteration 49: Global Deviance = 1991.518  #> GAMLSS-RS iteration 50: Global Deviance = 1990.826  #> GAMLSS-RS iteration 51: Global Deviance = 1990.111  #> GAMLSS-RS iteration 52: Global Deviance = 1989.373  #> GAMLSS-RS iteration 53: Global Deviance = 1988.617  #> GAMLSS-RS iteration 54: Global Deviance = 1987.847  #> GAMLSS-RS iteration 55: Global Deviance = 1987.068  #> GAMLSS-RS iteration 56: Global Deviance = 1986.285  #> GAMLSS-RS iteration 57: Global Deviance = 1985.506  #> GAMLSS-RS iteration 58: Global Deviance = 1984.74  #> GAMLSS-RS iteration 59: Global Deviance = 1983.994  #> GAMLSS-RS iteration 60: Global Deviance = 1983.277  #> GAMLSS-RS iteration 61: Global Deviance = 1982.597  #> GAMLSS-RS iteration 62: Global Deviance = 1981.963  #> GAMLSS-RS iteration 63: Global Deviance = 1981.381  #> GAMLSS-RS iteration 64: Global Deviance = 1980.854  #> GAMLSS-RS iteration 65: Global Deviance = 1980.384  #> GAMLSS-RS iteration 66: Global Deviance = 1979.972  #> GAMLSS-RS iteration 67: Global Deviance = 1979.619  #> GAMLSS-RS iteration 68: Global Deviance = 1979.317  #> GAMLSS-RS iteration 69: Global Deviance = 1979.062  #> GAMLSS-RS iteration 70: Global Deviance = 1978.85  #> GAMLSS-RS iteration 71: Global Deviance = 1978.676  #> GAMLSS-RS iteration 72: Global Deviance = 1978.533  #> GAMLSS-RS iteration 73: Global Deviance = 1978.417  #> GAMLSS-RS iteration 74: Global Deviance = 1978.324  #> GAMLSS-RS iteration 75: Global Deviance = 1978.25  #> GAMLSS-RS iteration 76: Global Deviance = 1978.192  #> GAMLSS-RS iteration 77: Global Deviance = 1978.146  #> GAMLSS-RS iteration 78: Global Deviance = 1978.112  #> GAMLSS-RS iteration 79: Global Deviance = 1978.085  #> GAMLSS-RS iteration 80: Global Deviance = 1978.064  #> GAMLSS-RS iteration 81: Global Deviance = 1978.047  #> GAMLSS-RS iteration 82: Global Deviance = 1978.034  #> GAMLSS-RS iteration 83: Global Deviance = 1978.024  #> GAMLSS-RS iteration 84: Global Deviance = 1978.016  #> GAMLSS-RS iteration 85: Global Deviance = 1978.01  #> GAMLSS-RS iteration 86: Global Deviance = 1978.005  #> GAMLSS-RS iteration 87: Global Deviance = 1978.001  #> GAMLSS-RS iteration 88: Global Deviance = 1977.998  #> GAMLSS-RS iteration 89: Global Deviance = 1977.996  #> GAMLSS-RS iteration 90: Global Deviance = 1977.994  #> GAMLSS-RS iteration 91: Global Deviance = 1977.992  #> GAMLSS-RS iteration 92: Global Deviance = 1977.991  #> GAMLSS-RS iteration 93: Global Deviance = 1977.99 summary(param_mm) #> ****************************************************************** #> Family:  c(\"OW\", \"Odd Weibull\")  #>  #> Call:  gamlss(formula = mice ~ 1, sigma.formula = ~1, nu.formula = ~1,   #>     family = myOW, sigma.start = 2, nu.start = 6, control = con.out)  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.87857    0.01489  -327.6   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   1.8206     0.1349    13.5   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Nu link function:  log  #> Nu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -0.2794     0.1640  -1.704     0.09 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  208  #> Degrees of Freedom for the fit:  3 #>       Residual Deg. of Freedom:  205  #>                       at cycle:  93  #>   #> Global Deviance:     1977.99  #>             AIC:     1983.99  #>             SBC:     1994.003  #> ******************************************************************"},{"path":[]},{"path":"http://ousuga.github.io/RelDists/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Freddy Hernandez-Barajas. Author, maintainer. Olga Usuga. Author. Carmen Patino. Author. Jaime Mosquera. Author. Amylkar Urrea. Author.","code":""},{"path":"http://ousuga.github.io/RelDists/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernandez-Barajas F, Usuga O, Patino C, Mosquera J, Urrea (2025). RelDists: Estimation Reliability Distributions. R package version 1.0.0, http://ousuga.github.io/RelDists/.","code":"@Manual{,   title = {RelDists: Estimation for some Reliability Distributions},   author = {Freddy Hernandez-Barajas and Olga Usuga and Carmen Patino and Jaime Mosquera and Amylkar Urrea},   year = {2025},   note = {R package version 1.0.0},   url = {http://ousuga.github.io/RelDists/}, }"},{"path":"http://ousuga.github.io/RelDists/index.html","id":"reldists-","dir":"","previous_headings":"","what":"Estimation for some Reliability Distributions","title":"Estimation for some Reliability Distributions","text":"package available multiple useful distributions reliability analysis. package possible estimate parameters fit regression models within GAMLSS framework.","code":""},{"path":"http://ousuga.github.io/RelDists/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimation for some Reliability Distributions","text":"install RelDists package, follow instructions : can visit package website explore vignettes (articles) function reference.","code":"# Installing from CRAN: install.packages(\"RelDists\")  # Or the development version from GitHub: # install.packages(\"pak\") pak::pak(\"ousuga/RelDists\")"},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Additive Weibull family — AddW","title":"The Additive Weibull family — AddW","text":"Additive Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Additive Weibull family — AddW","text":"","code":"AddW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Additive Weibull family — AddW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Additive Weibull family — AddW","text":"Returns gamlss.family object can used fit AddW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Additive Weibull family — AddW","text":"Additive Weibull distribution parameters mu, sigma, nu tau density given \\(f(x) = (\\mu\\nu x^{\\nu - 1} + \\sigma\\tau x^{\\tau - 1}) \\exp({-\\mu x^{\\nu} - \\sigma x^{\\tau} }),\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Additive Weibull family — AddW","text":"Almalki, S. J. (2018). reduced new modified Weibull distribution. Communications Statistics-Theory Methods, 47(10), 2297-2313. Xie, M., & Lai, C. D. (1996). Reliability analysis using additive Weibull model bathtub-shaped failure rate function. Reliability Engineering & System Safety, 52(1), 87-93.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Additive Weibull family — AddW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/AddW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Additive Weibull family — AddW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau # Will not be run this example because high number is cycles # is needed in order to get good estimates if (FALSE) { # \\dontrun{ y <- rAddW(n=100, mu=1.5, sigma=0.2, nu=3, tau=0.8)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family='AddW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what='mu')) exp(coef(mod, what='sigma')) exp(coef(mod, what='nu')) exp(coef(mod, what='tau')) } # }  # Example 2 # Generating random values under some model # Will not be run this example because high number is cycles # is needed in order to get good estimates if (FALSE) { # \\dontrun{ n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(1.67 + -3 * x1) sigma <- exp(0.69 - 2 * x2) nu <- 3 tau <- 0.8 x <- rAddW(n=n, mu, sigma, nu, tau)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~1, family=AddW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") coef(mod, what=\"sigma\") exp(coef(mod, what=\"nu\")) exp(coef(mod, what=\"tau\")) } # }"},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Beta Generalized Exponentiated family — BGE","title":"The Beta Generalized Exponentiated family — BGE","text":"Beta Generalized Exponentiated family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Beta Generalized Exponentiated family — BGE","text":"","code":"BGE(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Beta Generalized Exponentiated family — BGE","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Beta Generalized Exponentiated family — BGE","text":"Returns gamlss.family object can used fit BGE distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Beta Generalized Exponentiated family — BGE","text":"Beta Generalized Exponentiated distribution parameters mu, sigma, nu tau density given \\(f(x)= \\frac{\\nu \\tau}{B(\\mu, \\sigma)} \\exp(-\\nu x)(1- \\exp(-\\nu x))^{\\tau \\mu - 1} (1 - (1- \\exp(-\\nu x))^\\tau)^{\\sigma -1},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\), \\(\\nu > 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Beta Generalized Exponentiated family — BGE","text":"Almalki, S. J. (2018). reduced new modified Weibull distribution. Communications Statistics-Theory Methods, 47(10), 2297-2313. Barreto-Souza, W., Santos, . H., & Cordeiro, G. M. (2010). beta generalized exponential distribution. Journal statistical Computation Simulation, 80(2), 159-172.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Beta Generalized Exponentiated family — BGE","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Beta Generalized Exponentiated family — BGE","text":"","code":"# Generating some random values with # known mu, sigma, nu and tau y <- rBGE(n=100, mu = 1.5, sigma =1.7, nu=1, tau=1)  # Fitting the model require(gamlss) #> Loading required package: gamlss #> Loading required package: splines #> Loading required package: gamlss.data #>  #> Attaching package: 'gamlss.data' #> The following object is masked from 'package:datasets': #>  #>     sleep #> Loading required package: gamlss.dist #> Loading required package: nlme #>  #> Attaching package: 'nlme' #> The following object is masked from 'package:BBmisc': #>  #>     collapse #>  **********   GAMLSS Version 5.4-22  **********  #> For more on GAMLSS look at https://www.gamlss.com/ #> Type gamlssNews() to see new features/changes/bug fixes.  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family=BGE,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    1.291091  exp(coef(mod, what='sigma')) #> (Intercept)  #>   0.7667065  exp(coef(mod, what='nu')) #> (Intercept)  #>    2.260267  exp(coef(mod, what='tau')) #> (Intercept)  #>    1.240522   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(0.5 - x1) sigma <- exp(0.8 - x2) nu <- 1 tau <- 1 x <- rBGE(n=n, mu, sigma, nu, tau)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~1, family=BGE,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.543910   -1.318217  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.441633   -2.497046  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.086642  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>   0.4448615"},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders family — BS","title":"The Birnbaum-Saunders family — BS","text":"function BS() defines Birnbaum-Saunders, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders family — BS","text":"","code":"BS(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders family — BS","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders family — BS","text":"Returns gamlss.family object can used fit BS distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders family — BS","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x|\\mu,\\sigma) = \\frac{x^{-3/2}(x+\\mu)}{2\\sigma\\sqrt{2\\pi\\mu}} \\exp\\left(\\frac{-1}{2\\sigma^2}(\\frac{x}{\\mu}+\\frac{\\mu}{x}-2)\\right)\\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). parameterization \\(\\mu\\) median \\(X\\), \\(E(X)=\\mu(1+\\sigma^2/2)\\) \\(Var(X)=(\\mu\\sigma)^2(1+5\\sigma^2/4)\\). functions proposed corresponds functions created Roquim et al. (2021) minor modifications obtain correct log-likelihoods random samples.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders family — BS","text":"Birnbaum, Z.W. Saunders, S.C. (1969a). new family life distributions. J. Appl. Prob., 6, 319-327. Roquim, F. V., Ramires, T. G., Nakamura, L. R., Righetto, . J., Lima, R. R., & Gomes, R. . (2021). Building flexible regression models: including Birnbaum-Saunders distribution gamlss package. Semina: Ciências Exatas e Tecnológicas, 42(2), 163-168.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/BS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders family — BS","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rBS(n=100, mu=0.75, sigma=1.3)  # Fitting the model require(gamlss) mod1 <- gamlss(y~1, sigma.fo=~1, family=BS) #> GAMLSS-RS iteration 1: Global Deviance = 237.3994  #> GAMLSS-RS iteration 2: Global Deviance = 237.3972  #> GAMLSS-RS iteration 3: Global Deviance = 237.3972   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>   0.7713414  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    1.243161   # Example 2 # Generating random values for a regression model  # A function to simulate a data set with Y ~ BS gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(1.45 - 3 * x1)   sigma <- exp(2 - 1.5 * x2)   y <- rBS(n=n, mu=mu, sigma=sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(123) dat <- gendat(n=300)  mod2 <- gamlss(y~x1, sigma.fo=~x2,                 family=BS, data=dat) #> GAMLSS-RS iteration 1: Global Deviance = 6624.679  #> GAMLSS-RS iteration 2: Global Deviance = 6593.565  #> GAMLSS-RS iteration 3: Global Deviance = 6556.349  #> GAMLSS-RS iteration 4: Global Deviance = 6506.77  #> GAMLSS-RS iteration 5: Global Deviance = 6432.284  #> GAMLSS-RS iteration 6: Global Deviance = 6279.265  #> GAMLSS-RS iteration 7: Global Deviance = 1685.61  #> GAMLSS-RS iteration 8: Global Deviance = 1208.005  #> GAMLSS-RS iteration 9: Global Deviance = 1202.153  #> GAMLSS-RS iteration 10: Global Deviance = 1202.152   summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"BS\", \"Birnbaum-Saunders\")  #>  #> Call:  gamlss(formula = y ~ x1, sigma.formula = ~x2, family = BS, data = dat)  #>  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    1.476      0.236   6.256 1.37e-09 *** #> x1            -3.274      0.376  -8.707  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.01922    0.08094   24.95   <2e-16 *** #> x2          -1.52035    0.14010  -10.85   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  300  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  296  #>                       at cycle:  10  #>   #> Global Deviance:     1202.153  #>             AIC:     1210.153  #>             SBC:     1224.968  #> ******************************************************************  # Example 3 # Fatigue life (T) measures in cycles (×10−3) of n 101 # aluminum coupons (specimens) of type 6061-T6. # Taken from Leiva et al. (2006) page 37. # https://journal.r-project.org/articles/RN-2006-033/RN-2006-033.pdf  y <- c(70, 90, 96, 97, 99, 100, 103, 104,        104, 105, 107, 108, 108, 108, 109, 109,        112, 112, 113, 114, 114, 114, 116, 119,        120, 120, 120, 121, 121, 123, 124, 124,        124, 124, 124, 128, 128, 129, 129, 130,        130, 130, 131, 131, 131, 131, 131, 132,        132, 132, 133, 134, 134, 134, 134, 134,        136, 136, 137, 138, 138, 138, 139, 139,        141, 141, 142, 142, 142, 142, 142, 142,        144, 144, 145, 146, 148, 148, 149, 151,        151, 152, 155, 156, 157, 157, 157, 157,        158, 159, 162, 163, 163, 164, 166, 166,        168, 170, 174, 196, 212)  mod3 <- gamlss(y~1, sigma.fo=~1, family=BS) #> GAMLSS-RS iteration 1: Global Deviance = 914.5494  #> GAMLSS-RS iteration 2: Global Deviance = 914.5411  #> GAMLSS-RS iteration 3: Global Deviance = 914.5411   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod3, what=\"mu\")) #> (Intercept)  #>    131.8188  exp(coef(mod3, what=\"sigma\")) #> (Intercept)  #>   0.1703847   # Example 4 # Aggregate payments by the insurer # in thousand Skr (Swedish currency). # Taken from Balakrishnan and Kundu (2019) page 65. # https://onlinelibrary.wiley.com/doi/abs/10.1002/asmb.2348  y <- c(5014, 5855, 6486, 6540, 6656, 6656, 7212, 7541, 7558,         7797, 8546, 9345, 11762, 12478, 13624, 14451,        14940, 14963, 15092, 16203, 16229, 16730, 18027,         18343, 19365, 21782, 24248, 29069, 34267, 38993)  y <- y/10000  mod4 <- gamlss(y~1, sigma.fo=~1, family=BS) #> GAMLSS-RS iteration 1: Global Deviance = 61.4839  #> GAMLSS-RS iteration 2: Global Deviance = 61.4837   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod4, what=\"mu\")) #> (Intercept)  #>    1.256498  exp(coef(mod4, what=\"sigma\")) #> (Intercept)  #>   0.5595511"},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"function BS2() defines Birnbaum-Saunders, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"","code":"BS2(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"Returns gamlss.family object can used fit BS2 distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x|\\mu,\\sigma) = \\frac{\\exp(\\sigma/2)\\sqrt{\\sigma+1}}{4\\sqrt{\\pi\\mu}x^{3/2}} \\left[ x + \\frac{\\mu\\sigma}{\\sigma+1} \\right] \\exp\\left( \\frac{-\\sigma}{4} \\left(\\frac{x(\\sigma+1)}{\\mu\\sigma}+\\frac{\\mu\\sigma}{x(\\sigma+1)} \\right) \\right) \\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). parameterization \\(E(X)=\\mu\\) \\(Var(X)=\\frac{\\mu^2(2\\sigma+5)}{(\\sigma+1)^2}\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"Santos-Neto, M., Cysneiros, F. J. ., Leiva, V., & Barros, M. (2014). reparameterized Birnbaum–Saunders distribution moments, estimation applications. REVSTAT-Statistical Journal, 12(3), 247-272.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/BS2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders family - Santos-Neto et al. (2014) — BS2","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rBS2(n=50, mu=5, sigma=3)  # Fitting the model require(gamlss) mod1 <- gamlss(y~1, sigma.fo=~1, family=BS2) #> GAMLSS-RS iteration 1: Global Deviance = 260.7219  #> GAMLSS-RS iteration 2: Global Deviance = 253.8557  #> GAMLSS-RS iteration 3: Global Deviance = 253.1539  #> GAMLSS-RS iteration 4: Global Deviance = 253.1207  #> GAMLSS-RS iteration 5: Global Deviance = 253.1194  #> GAMLSS-RS iteration 6: Global Deviance = 253.1193   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>    5.156935  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    2.932423   # Example 2 # Generating random values for a regression model  # A function to simulate a data set with Y ~ BS2 gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(1.45 - 3 * x1)   sigma <- exp(2 - 1.5 * x2)   y <- rBS2(n=n, mu=mu, sigma=sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(123) dat <- gendat(n=100)  mod2 <- gamlss(y~x1, sigma.fo=~x2,                 family=BS2, data=dat) #> GAMLSS-RS iteration 1: Global Deviance = 159.4399  #> GAMLSS-RS iteration 2: Global Deviance = 143.4244  #> GAMLSS-RS iteration 3: Global Deviance = 141.9155  #> GAMLSS-RS iteration 4: Global Deviance = 141.8536  #> GAMLSS-RS iteration 5: Global Deviance = 141.8508  #> GAMLSS-RS iteration 6: Global Deviance = 141.8508   summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"BS2\", \"Birnbaum-Saunders - second parameterization\")  #>  #> Call:  gamlss(formula = y ~ x1, sigma.formula = ~x2, family = BS2, data = dat)  #>  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   1.5150     0.1639   9.241 5.37e-15 *** #> x1           -3.1673     0.2761 -11.472  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   1.9226     0.3121   6.160 1.61e-08 *** #> x2           -1.3323     0.5464  -2.439   0.0165 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  100  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  96  #>                       at cycle:  6  #>   #> Global Deviance:     141.8508  #>             AIC:     149.8508  #>             SBC:     160.2715  #> ******************************************************************  # Example 3 # Household expenditures for food in the United States (US) expressed # in thousands of US dollars (M$) # Santos-Neto et al. (2014) page 266.  y <- c(15.998, 16.652, 21.741, 7.431, 10.481, 13.548, 23.256, 17.976,         14.161, 8.825, 14.184, 19.604, 13.728, 21.141, 17.446, 9.629,         14.005, 9.160, 18.831, 7.641, 13.882, 9.670, 21.604, 10.866,         28.980, 10.882, 18.561, 11.629, 18.067, 14.539, 19.192, 25.918,         28.833, 15.869, 14.910, 9.550, 23.066, 14.751)  mod3 <- gamlss(y~1, sigma.fo=~1, family=BS2) #> GAMLSS-RS iteration 1: Global Deviance = 273.8873  #> GAMLSS-RS iteration 2: Global Deviance = 241.5346  #> GAMLSS-RS iteration 3: Global Deviance = 234.6666  #> GAMLSS-RS iteration 4: Global Deviance = 234.5041  #> GAMLSS-RS iteration 5: Global Deviance = 234.5031  #> GAMLSS-RS iteration 6: Global Deviance = 234.5031   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod3, what=\"mu\")) #> (Intercept)  #>    15.95236  exp(coef(mod3, what=\"sigma\")) #> (Intercept)  #>    15.57376   # Example 4 # lifetimes of 6061-T6 aluminum coupons expressed in cycles (×10−3) # at a maximum stress level of 3.1 psi (×104), until the failure to occur. # Santos-Neto et al. (2014) page 267.  y <- c(70, 90, 96, 97, 99, 100, 103, 104, 104, 105, 107, 108, 108, 108, 109,        109, 112, 112, 113, 114, 114, 114, 116, 119, 120, 120, 120, 121, 121,         123, 124, 124, 124, 124, 124, 128, 128, 129, 129, 130, 130, 130, 131,         131, 131, 131, 131, 132, 132, 132, 133, 134, 134, 134, 134, 134, 136,         136, 137, 138, 138, 138, 139, 139, 141, 141, 142, 142, 142, 142, 142,         142, 144, 144, 145, 146, 148, 148, 149, 151, 151, 152, 155, 156, 157,         157, 157, 157, 158, 159, 162, 163, 163, 164, 166, 166, 168, 170, 174,         196, 212)  mod4 <- gamlss(y~1, sigma.fo=~1, family=BS2) #> GAMLSS-RS iteration 1: Global Deviance = 1119.695  #> GAMLSS-RS iteration 2: Global Deviance = 959.2597  #> GAMLSS-RS iteration 3: Global Deviance = 915.0024  #> GAMLSS-RS iteration 4: Global Deviance = 914.5413  #> GAMLSS-RS iteration 5: Global Deviance = 914.5411   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod4, what=\"mu\")) #> (Intercept)  #>    133.7347  exp(coef(mod4, what=\"sigma\")) #> (Intercept)  #>    68.85699"},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"function BS3() defines Birnbaum-Saunders, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"","code":"BS3(mu.link = \"log\", sigma.link = \"logit\")"},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"logit\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"Returns gamlss.family object can used fit BS3 distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x|\\mu,\\sigma) = \\frac{(1-\\sigma)y+\\mu}{2\\sqrt{2\\pi\\mu\\sigma(1-\\sigma)}y^{3/2}} \\exp{\\left[ \\frac{-1}{2\\sigma} \\left( \\frac{(1-\\sigma)y}{\\mu} + \\frac{\\mu}{(1-\\sigma)y} - 2 \\right) \\right]} \\) \\(x>0\\), \\(\\mu>0\\) \\(0<\\sigma<1\\). parameterization \\(Mode(X)=\\mu\\) \\(Var(X)=(\\mu\\sigma)^2(1+5\\sigma^2/4)\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"Bourguignon, M., & Gallardo, D. . (2022). new look Birnbaum–Saunders regression model. Applied Stochastic Models Business Industry, 38(6), 935-951.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/BS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders family - Bourguignon & Gallardo (2022) — BS3","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rBS3(n=50, mu=2, sigma=0.2)  # Fitting the model require(gamlss) mod1 <- gamlss(y~1, sigma.fo=~1, family=BS3) #> GAMLSS-RS iteration 1: Global Deviance = 166.6478  #> GAMLSS-RS iteration 2: Global Deviance = 163.3509  #> GAMLSS-RS iteration 3: Global Deviance = 160.4004  #> GAMLSS-RS iteration 4: Global Deviance = 158.3753  #> GAMLSS-RS iteration 5: Global Deviance = 157.3807  #> GAMLSS-RS iteration 6: Global Deviance = 157.0305  #> GAMLSS-RS iteration 7: Global Deviance = 156.929  #> GAMLSS-RS iteration 8: Global Deviance = 156.9034  #> GAMLSS-RS iteration 9: Global Deviance = 156.8976  #> GAMLSS-RS iteration 10: Global Deviance = 156.8962  #> GAMLSS-RS iteration 11: Global Deviance = 156.8958   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>    1.904568  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>   0.3035287   # Example 2 # Generating random values for a regression model  # A function to simulate a data set with Y ~ BS3 if (FALSE) { # \\dontrun{ gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(1.45 - 3 * x1)   inv_logit <- function(x) 1 / (1 + exp(-x))   sigma <- inv_logit(2 - 1.5 * x2)   y <- rBS3(n=n, mu=mu, sigma=sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(1234) dat <- gendat(n=100)  mod2 <- gamlss(y~x1, sigma.fo=~x2,                 family=BS3, data=dat,                control=gamlss.control(n.cyc=100))  summary(mod2) } # }  # Example 3 # The response variable is the ratio between the average # rent per acre planted with alfalfa and the corresponding  # average rent for other agricultural uses. The density of # dairy cows (X2, number per square mile) is the explanatory variable.  library(alr4) #> Loading required package: car #> Loading required package: carData #> Loading required package: effects #> lattice theme set by effectsTheme() #> See ?effectsTheme for details. data(\"landrent\")  landrent$ratio <- landrent$Y / landrent$X1  with(landrent, plot(x=X2, y=ratio))   mod3 <- gamlss(ratio~X2, sigma.fo=~X2,                 data=landrent, family=BS3) #> GAMLSS-RS iteration 1: Global Deviance = 65.753  #> GAMLSS-RS iteration 2: Global Deviance = 39.2056  #> GAMLSS-RS iteration 3: Global Deviance = 0.2741  #> GAMLSS-RS iteration 4: Global Deviance = -24.7118  #> GAMLSS-RS iteration 5: Global Deviance = -27.898  #> GAMLSS-RS iteration 6: Global Deviance = -27.9666  #> GAMLSS-RS iteration 7: Global Deviance = -27.9674   summary(mod3) #> ****************************************************************** #> Family:  c(\"BS3\", \"Birnbaum-Saunders - third parameterization\")  #>  #> Call:  gamlss(formula = ratio ~ X2, sigma.formula = ~X2, family = BS3,   #>     data = landrent)  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.312542   0.040942  -7.634 1.56e-10 *** #> X2           0.010503   0.001835   5.725 3.10e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  logit #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -3.41398    0.31153 -10.959 3.12e-16 *** #> X2           0.01545    0.01218   1.269    0.209     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  67  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  63  #>                       at cycle:  7  #>   #> Global Deviance:     -27.96742  #>             AIC:     -19.96742  #>             SBC:     -11.14865  #> ****************************************************************** logLik(mod3) #> 'log Lik.' 13.98371 (df=4)"},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":null,"dir":"Reference","previous_headings":"","what":"The two-parameter Chris-Jerry distribution family — CJ2","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"function CJ2() defines  two-parameter  Chris-Jerry distribution, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"","code":"CJ2(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"Returns gamlss.family object can used fit CJ2 distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"two-parameter  Chris-Jerry distribution parameters mu sigma density given \\( f(x; \\sigma, \\mu) = \\frac{\\mu^2}{\\sigma \\mu + 2} (\\sigma + \\mu x^2) e^{-\\mu x}; \\quad x > 0, \\quad \\mu > 0, \\quad \\sigma > 0 \\) Note: implementation changed original parameters \\(\\theta\\) \\(\\mu\\) \\(\\lambda\\) \\(\\sigma\\) implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"Chinedu, Eberechukwu Q., et al. \"New lifetime distribution applications single acceptance sampling plan scenarios increasing hazard rates\" Symmetry 15.10 (2023): 188.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"Manuel Gutierrez Tangarife, mgutierrezta@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CJ2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The two-parameter Chris-Jerry distribution family — CJ2","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rCJ2(n=500, mu=1, sigma=1.5)  # Fitting the model require(gamlss)  mod1 <- gamlss(y~1, sigma.fo=~1, family=CJ2,                control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 1734.222  #> GAMLSS-RS iteration 2: Global Deviance = 1731.975  #> GAMLSS-RS iteration 3: Global Deviance = 1731.265  #> GAMLSS-RS iteration 4: Global Deviance = 1731.018  #> GAMLSS-RS iteration 5: Global Deviance = 1730.928  #> GAMLSS-RS iteration 6: Global Deviance = 1730.893  #> GAMLSS-RS iteration 7: Global Deviance = 1730.88  #> GAMLSS-RS iteration 8: Global Deviance = 1730.875  #> GAMLSS-RS iteration 9: Global Deviance = 1730.873  #> GAMLSS-RS iteration 10: Global Deviance = 1730.872   # Extracting the fitted values for mu, sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>   0.9865195  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    1.686918   # Example 2 # Generating random values under some model gendat <- function(n) {   x1 <- runif(n, min=0, max=5)   x2 <- runif(n, min=0, max=5)   mu <- exp(-0.2 + 1.5 * x1)   sigma <- exp(1 - 0.7 * x2)   y <- rCJ2(n=n, mu, sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(123) datos <- gendat(n=500)  mod2 <- gamlss(y~x1, sigma.fo=~x2, family=CJ2, data=datos,                control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = -2211.964  #> GAMLSS-RS iteration 2: Global Deviance = -2213.243  #> GAMLSS-RS iteration 3: Global Deviance = -2213.713  #> GAMLSS-RS iteration 4: Global Deviance = -2213.887  #> GAMLSS-RS iteration 5: Global Deviance = -2213.948  #> GAMLSS-RS iteration 6: Global Deviance = -2213.97  #> GAMLSS-RS iteration 7: Global Deviance = -2213.978  #> GAMLSS-RS iteration 8: Global Deviance = -2213.981  #> GAMLSS-RS iteration 9: Global Deviance = -2213.982   summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"CJ2\", \"a two-parameter\\n Chris-Jerry distribution\")  #>  #> Call:   #> gamlss(formula = y ~ x1, sigma.formula = ~x2, family = CJ2, data = datos,   #>     control = gamlss.control(n.cyc = 5000, trace = TRUE))  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.22632    0.05892  -3.841 0.000138 *** #> x1           1.51252    0.02380  63.556  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   1.0639     0.5649   1.883 0.060217 .   #> x2           -0.6515     0.1850  -3.521 0.000469 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  500  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  496  #>                       at cycle:  9  #>   #> Global Deviance:     -2213.982  #>             AIC:     -2205.982  #>             SBC:     -2189.123  #> ******************************************************************"},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":null,"dir":"Reference","previous_headings":"","what":"The Cosine Sine Exponential family — CS2e","title":"The Cosine Sine Exponential family — CS2e","text":"Cosine Sine Exponential family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Cosine Sine Exponential family — CS2e","text":"","code":"CS2e(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Cosine Sine Exponential family — CS2e","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Cosine Sine Exponential family — CS2e","text":"Returns gamlss.family object can used fit CS2e distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Cosine Sine Exponential family — CS2e","text":"Cosine Sine Exponential distribution parameters mu, sigma nu density given \\(f(x)=\\frac{\\pi \\sigma \\mu \\exp(\\frac{-x} {\\nu})}{2 \\nu [(\\mu\\sin(\\frac{\\pi}{2} \\exp(\\frac{-x} {\\nu})) + \\sigma\\cos(\\frac{\\pi}{2} \\exp(\\frac{-x} {\\nu}))]^2}, \\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Cosine Sine Exponential family — CS2e","text":"Chesneau, C., Bakouch, H. S., & Hussain, T. (2019). new class probability distributions via cosine sine functions applications. Communications Statistics-Simulation Computation, 48(8), 2287-2300.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Cosine Sine Exponential family — CS2e","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/CS2e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Cosine Sine Exponential family — CS2e","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu  y <- rCS2e(n=100, mu = 0.1, sigma =1, nu=0.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='CS2e',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>  0.07928951  exp(coef(mod, what='sigma')) #> (Intercept)  #>   0.9942416  exp(coef(mod, what='nu')) #> (Intercept)  #>   0.5273156   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.45, max=0.55) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(0.2 - x1) sigma <- exp(0.8 - x2) nu <- 0.5 x <- rCS2e(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1,family=CS2e,               control=gamlss.control(n.cyc=50000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   -1.779016    1.970928  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    2.406788   -4.828791  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.5915682"},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Additive Weibull distribution — dAddW","title":"The Additive Weibull distribution — dAddW","text":"Density, distribution function, quantile function, random generation hazard function Additive Weibull distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Additive Weibull distribution — dAddW","text":"","code":"dAddW(x, mu, sigma, nu, tau, log = FALSE)  pAddW(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qAddW(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rAddW(n, mu, sigma, nu, tau)  hAddW(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Additive Weibull distribution — dAddW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu shape parameter. tau shape parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Additive Weibull distribution — dAddW","text":"dAddW gives density, pAddW gives distribution function, qAddW gives quantile function, rAddW generates random deviates hAddW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Additive Weibull distribution — dAddW","text":"Additive Weibull Distribution parameters mu, sigma, nu tau density given \\(f(x) = (\\mu\\nu x^{\\nu - 1} + \\sigma\\tau x^{\\tau - 1}) \\exp({-\\mu x^{\\nu} - \\sigma x^{\\tau} }),\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Additive Weibull distribution — dAddW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Xie, M., & Lai, C. D. (1996). Reliability analysis using additive Weibull model bathtub-shaped failure rate function. Reliability Engineering & System Safety, 52(1), 87-93.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Additive Weibull distribution — dAddW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dAddW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Additive Weibull distribution — dAddW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dAddW(x, mu=1.5, sigma=0.5, nu=3, tau=0.8), from=0.0001, to=2,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pAddW(x, mu=1.5, sigma=0.5, nu=3, tau=0.8),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"F(x)\") curve(pAddW(x, mu=1.5, sigma=0.5, nu=3, tau=0.8, lower.tail=FALSE),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qAddW(p, mu=1.5, sigma=0.2, nu=3, tau=0.8), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pAddW(x, mu=1.5, sigma=0.2, nu=3, tau=0.8),        from=0, add=TRUE, col=\"red\")  ## The random function hist(rAddW(n=10000, mu=1.5, sigma=0.2, nu=3, tau=0.8), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dAddW(x, mu=1.5, sigma=0.2, nu=3, tau=0.8),       from=0.09, to=5, add=TRUE, col=\"red\")   ## The Hazard function curve(hAddW(x, mu=1.5, sigma=0.2, nu=3, tau=0.8), from=0.001, to=1,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Beta Generalized Exponentiated distribution — dBGE","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"Density, distribution function, quantile function, random generation hazard function Beta Generalized Exponentiated  distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"","code":"dBGE(x, mu, sigma, nu, tau, log = FALSE)  pBGE(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qBGE(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rBGE(n, mu, sigma, nu, tau)  hBGE(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"dBGE gives density, pBGE gives distribution function, qBGE gives quantile function, rBGE generates random deviates hBGE gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"Beta Generalized Exponentiated  Distribution parameters mu, sigma, nu tau density given \\(f(x)= \\frac{\\nu \\tau}{B(\\mu, \\sigma)} \\exp(-\\nu x)(1- \\exp(-\\nu x))^{\\tau \\mu - 1} (1 - (1- \\exp(-\\nu x))^\\tau)^{\\sigma -1},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\), \\(\\nu > 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Barreto-Souza, W., Santos, . H., & Cordeiro, G. M. (2010). beta generalized exponential distribution. Journal statistical Computation Simulation, 80(2), 159-172.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBGE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Beta Generalized Exponentiated distribution — dBGE","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dBGE(x, mu = 1.5, sigma =1.7, nu=1, tau=1), from = 0, to = 3,        col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pBGE(x, mu = 1.5, sigma =1.7, nu=1, tau=1), from = 0, to = 6,        ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pBGE(x, mu = 1.5, sigma =1.7, nu=1, tau=1, lower.tail = FALSE),        from = 0, to = 6, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qBGE(p = p, mu = 1.5, sigma =1.7, nu=1, tau=1), y = p,       xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pBGE(x, mu = (1/4), sigma =1, nu=1, tau=2), from = 0, add = TRUE,        col = \"red\")  ## The random function hist(rBGE(1000, mu = 1.5, sigma =1.7, nu=1, tau=1), freq = FALSE, xlab = \"x\",       ylim = c(0, 1), las = 1, main = \"\") curve(dBGE(x, mu = 1.5, sigma =1.7, nu=1, tau=1),  from = 0, add = TRUE,        col = \"red\", ylim = c(0, 0.5))   ## The Hazard function( par(mfrow=c(1,1)) curve(hBGE(x, mu = 0.9, sigma =0.5, nu=1, tau=1), from = 0, to = 2,        col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders distribution — dBS","title":"The Birnbaum-Saunders distribution — dBS","text":"Density, distribution function, quantile function, random generation hazard function Birnbaum-Saunders distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders distribution — dBS","text":"","code":"dBS(x, mu = 1, sigma = 1, log = FALSE)  pBS(q, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  qBS(p, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rBS(n, mu = 1, sigma = 1)  hBS(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders distribution — dBS","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders distribution — dBS","text":"dBS gives density, pBS gives distribution function, qBS gives quantile function, rBS generates random deviates hBS gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders distribution — dBS","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x) = \\frac{x^{-3/2}(x+\\mu)}{2\\sigma\\sqrt{2\\pi\\mu}} \\exp\\left(\\frac{-1}{2\\sigma^2}(\\frac{x}{\\mu}+\\frac{\\mu}{x}-2)\\right)\\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). parameterization \\(\\mu\\) median \\(X\\), \\(E(X)=\\mu(1+\\sigma^2/2)\\) \\(Var(X)=(\\mu\\sigma)^2(1+5\\sigma^2/4)\\). functions proposed corresponds functions created Roquim et al. (2021) minor modifications obtain correct log-likelihoods random samples.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders distribution — dBS","text":"Birnbaum, Z.W. Saunders, S.C. (1969a). new family life distributions. J. Appl. Prob., 6, 319-327. Roquim, F. V., Ramires, T. G., Nakamura, L. R., Righetto, . J., Lima, R. R., & Gomes, R. . (2021). Building flexible regression models: including Birnbaum-Saunders distribution gamlss package. Semina: Ciências Exatas e Tecnológicas, 42(2), 163-168.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dBS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders distribution — dBS","text":"","code":"#Example 1 #Plotting the mass function for different parameter values curve(dBS(x, mu=0.5, sigma=0.5),        from=0.001, to=5,       ylim=c(0, 2),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS(x, mu=1, sigma=0.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dBS(x, mu=1.5, sigma=0.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=0.5\",                              \"mu=1.0, sigma=0.5\",                             \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    curve(dBS(x, mu=0.5, sigma=1),        from=0.001, to=5,       ylim=c(0, 1.5),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS(x, mu=1, sigma=1),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dBS(x, mu=1.5, sigma=1),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=1\",                              \"mu=1.0, sigma=1\",                             \"mu=1.5, sigma=1\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    curve(dBS(x, mu=0.5, sigma=1.5),        from=0.001, to=8,       ylim=c(0, 2),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS(x, mu=1, sigma=1.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dBS(x, mu=1.5, sigma=1.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=1.5\",                              \"mu=1.0, sigma=1.5\",                             \"mu=1.5, sigma=1.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)   # Example 2 # Checking if the cumulative curves converge to 1 curve(pBS(x, mu=0.5, sigma=0.5),        from=0.001, to=5,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Cumulative Distribution Function\",       xlab=\"x\", ylab=\"f(x)\") curve(pBS(x, mu=1, sigma=0.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(pBS(x, mu=1.5, sigma=0.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=0.5, sigma=0.5\",                                 \"mu=1.0, sigma=0.5\",                                \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.5)  curve(pBS(x, mu=0.5, sigma=0.5, lower.tail=FALSE),        from=0.001, to=5,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Cumulative Distribution Function\",       xlab=\"x\", ylab=\"f(x)\") curve(pBS(x, mu=1, sigma=0.5, lower.tail=FALSE),       col=\"tomato\",        lwd=2,       add=TRUE) curve(pBS(x, mu=1.5, sigma=0.5, lower.tail=FALSE),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=0.5\",                              \"mu=1.0, sigma=0.5\",                             \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.5)   #example 3 ## The quantile function p <- seq(from=0, to=0.999, length.out=100) plot(x=qBS(p, mu=2.3, sigma=1.7), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\", main=\"Quantile function \") curve(pBS(x, mu=2.3, sigma=1.7),        from=0, add=TRUE, col=\"tomato\", lwd=2.5)   #some values p <- c(0.25, 0.5, 0.75) quantile <- qBS(p=p, mu=2.3, sigma=1.7)  for(i in quantile){   print(integrate(dBS, lower=0, upper=i, mu=2.3, sigma=1.7)) } #> 0.25 with absolute error < 2.3e-08 #> 0.5 with absolute error < 2.2e-09 #> 0.75 with absolute error < 6.1e-06  #example 4 ## The random function x <- rBS(n=10000, mu=20, sigma=0.5) hist(x, freq=FALSE) curve(dBS(x, mu=20, sigma=0.5), from=0, to=100,        add=TRUE, col=\"tomato\", lwd=2)   #example 5 ## The Hazard function curve(hBS(x, mu=20, sigma=0.5), from=0.001, to=100,       col=\"tomato\", ylab=\"Hazard function\", las=1)"},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"Density, distribution function, quantile function, random generation hazard function Birnbaum-Saunders distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"","code":"dBS2(x, mu = 1, sigma = 1, log = FALSE)  pBS2(q, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  qBS2(p, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rBS2(n, mu = 1, sigma = 1)  hBS2(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"dBS2 gives density, pBS2 gives distribution function, qBS2 gives quantile function, rBS2 generates random deviates hBS2 gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x) = \\frac{\\exp(\\sigma/2)\\sqrt{\\sigma+1}}{4\\sqrt{\\pi\\mu}x^{3/2}} \\left[ x + \\frac{\\mu\\sigma}{\\sigma+1} \\right] \\exp\\left( \\frac{-\\sigma}{4} \\left(\\frac{x(\\sigma+1)}{\\mu\\sigma}+\\frac{\\mu\\sigma}{x(\\sigma+1)} \\right) \\right) \\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). parameterization \\(E(X)=\\mu\\) \\(Var(X)=(\\mu\\sigma)^2(1+5\\sigma^2/4)\\). functions proposed corresponds parameterization proposed Santos-Neto et al. (2014).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"Santos-Neto, M., Cysneiros, F. J. ., Leiva, V., & Barros, M. (2014). reparameterized Birnbaum–Saunders distribution moments, estimation applications. REVSTAT-Statistical Journal, 12(3), 247-272.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dBS2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders distribution - Santos-Neto et al. (2014) — dBS2","text":"","code":"#Example 1 #Plotting the mass function for different parameter values curve(dBS2(x, mu=1.0, sigma=100),        from=0.001, to=5,       ylim=c(0, 3),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS2(x, mu=1.5, sigma=100),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dBS2(x, mu=2.0, sigma=100),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=1.0, sigma=100\",                              \"mu=1.5, sigma=100\",                             \"mu=2.0, sigma=100\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    curve(dBS2(x, mu=1, sigma=2),        from=0.001, to=2,       ylim=c(0, 1.1),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS2(x, mu=1, sigma=5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dBS2(x, mu=1, sigma=10),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=1, sigma=2\",                              \"mu=1, sigma=5\",                             \"mu=1, sigma=10\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    # Example 2 # Checking if the cumulative curves converge to 1 curve(pBS2(x, mu=0.5, sigma=0.5),        from=0.001, to=15,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Cumulative Distribution Function\",       xlab=\"x\", ylab=\"f(x)\") curve(pBS2(x, mu=1, sigma=0.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(pBS2(x, mu=1.5, sigma=0.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=0.5, sigma=0.5\",                                 \"mu=1.0, sigma=0.5\",                                \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.5)   # Example 3 # The quantile function p <- seq(from=0, to=0.999, length.out=100) plot(x=qBS2(p, mu=2.3, sigma=1.7), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\", main=\"Quantile function \") curve(pBS2(x, mu=2.3, sigma=1.7),        from=0, add=TRUE, col=\"tomato\", lwd=2.5)   # Example 4 # The random function x <- rBS2(n=10000, mu=2.5, sigma=100) hist(x, freq=FALSE) curve(dBS2(x, mu=2.5, sigma=100), from=0, to=10,        add=TRUE, col=\"tomato\", lwd=2)   # Example 5 # The Hazard function curve(hBS2(x, mu=20, sigma=0.5), from=0.001, to=100,       col=\"tomato\", ylab=\"Hazard function\", las=1)"},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":null,"dir":"Reference","previous_headings":"","what":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"Density, distribution function, quantile function, random generation hazard function Birnbaum-Saunders distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"","code":"dBS3(x, mu = 1, sigma = 0.5, log = FALSE)  pBS3(q, mu = 1, sigma = 0.5, lower.tail = TRUE, log.p = FALSE)  qBS3(p, mu = 1, sigma = 0.5, lower.tail = TRUE, log.p = FALSE)  rBS3(n, mu = 1, sigma = 0.5)  hBS3(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"dBS3 gives density, pBS3 gives distribution function, qBS3 gives quantile function, rBS3 generates random deviates hBS3 gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"Birnbaum-Saunders parameters mu sigma density given \\(f(x) = \\frac{\\exp(\\sigma/2)\\sqrt{\\sigma+1}}{4\\sqrt{\\pi\\mu}x^{3/2}} \\left[ x + \\frac{\\mu\\sigma}{\\sigma+1} \\right] \\exp\\left( \\frac{-\\sigma}{4} \\left(\\frac{x(\\sigma+1)}{\\mu\\sigma}+\\frac{\\mu\\sigma}{x(\\sigma+1)} \\right) \\right) \\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). parameterization \\(E(X)=\\mu\\) \\(Var(X)=(\\mu\\sigma)^2(1+5\\sigma^2/4)\\). functions proposed corresponds parameterization proposed Santos-Neto et al. (2014).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"Bourguignon, M., & Gallardo, D. . (2022). new look Birnbaum–Saunders regression model. Applied Stochastic Models Business Industry, 38(6), 935-951.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dBS3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Birnbaum-Saunders distribution - Bourguignon & Gallardo (2022) — dBS3","text":"","code":"# Example 1 # Plotting the mass function for different parameter values curve(dBS3(x, mu=2, sigma=0.2),        from=0.001, to=10,       ylim=c(0, 0.4),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dBS3(x, mu=2, sigma=0.4),       col=\"tomato\",        lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=2, sigma=0.2\",                              \"mu=2, sigma=0.4\"),        col=c(\"royalblue1\", \"tomato\"), lwd=2, cex=0.6)   # Example 2 # Checking if the cumulative curves converge to 1 curve(pBS3(x, mu=2, sigma=0.2),        from=0.00001, to=10,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Cumulative Distribution Function\",       xlab=\"x\", ylab=\"f(x)\") curve(pBS3(x, mu=2, sigma=0.4),       col=\"tomato\",        lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=2, sigma=0.2\",                                 \"mu=2, sigma=0.4\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.5)   # Example 3 # The quantile function p <- seq(from=0, to=0.999, length.out=100) plot(x=qBS3(p, mu=2, sigma=0.2), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\", main=\"Quantile function \") curve(pBS3(x, mu=2, sigma=0.2),        from=0, add=TRUE, col=\"tomato\", lwd=2.5)   # Example 4 # The random function x <- rBS3(n=10000, mu=2, sigma=0.2) hist(x, freq=FALSE) curve(dBS3(x, mu=2, sigma=0.2), from=0, to=10,        add=TRUE, col=\"tomato\", lwd=2)   # Example 5 # The Hazard function curve(hBS3(x, mu=2, sigma=0.2), from=0.001, to=4,       col=\"tomato\", ylab=\"Hazard function\", las=1)"},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":null,"dir":"Reference","previous_headings":"","what":"The two-parameter Chris-Jerry distribution — dCJ2","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"Density, distribution function, quantile function, random generation hazard function  two-parameter Chris-Jerry distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"","code":"dCJ2(x, mu, sigma, log = FALSE)  pCJ2(q, mu, sigma, log.p = FALSE, lower.tail = TRUE)  qCJ2(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rCJ2(n, mu, sigma)  hCJ2(x, mu, sigma, log = FALSE)"},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"dCJ2 gives density, pCJ2 gives distribution function, qCJ2 gives quantile function, rCJ2 generates random deviates hCJ2 gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"two-parameter Chris-Jerry distribution parameters mu sigma density given \\( f(x; \\sigma, \\mu) = \\frac{\\mu^2}{\\sigma \\mu + 2} (\\sigma + \\mu x^2) e^{-\\mu x}; \\quad x > 0, \\quad \\mu > 0, \\quad \\sigma > 0 \\) Note: implementation changed original parameters \\(\\theta\\) \\(\\mu\\) \\(\\lambda\\) \\(\\sigma\\), implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"Chinedu, Eberechukwu Q., et al. \"New lifetime distribution applications single acceptance sampling plan scenarios increasing hazard rates\" Symmetry 15.10 (2023): 188.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"Manuel Gutierrez Tangarife, mgutierrezta@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCJ2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The two-parameter Chris-Jerry distribution — dCJ2","text":"","code":"# Example 1 # Plotting the density function for different parameter values curve(dCJ2(x, mu=3.5, sigma=0.01),        from=0.0001, to=5,       ylim=c(0, 1),       col=\"red\", lwd=2,       main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dCJ2(x, mu=2, sigma=0.05),       col=\"green\",       lwd=2,       add=TRUE) curve(dCJ2(x, mu=1.5, sigma=0.01),       col=\"blue\",       lwd=2,       add=TRUE) curve(dCJ2(x, mu=2.5, sigma=0.01),       col=\"lightblue\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=3.5, sigma=0.01\",                             \"mu=2, sigma=0.05\",                             \"mu=1.5, sigma=0.01\",                             \"mu=2.5, sigma=0.1\"),        col=c( \"red\", \"green\",\"blue\",\"lightblue\"), lwd=2, cex=0.6)   # Example 2 # Checking if the cumulative curves converge to 1 curve(pCJ2(x, mu=2.7, sigma=0.1),       from=0.0001, to=5,       ylim=c(0, 1),       col=\"red\", lwd=2,       main=\"Cumulative function\",       xlab=\"x\", ylab=\"f(x)\") curve(pCJ2(x, mu=2.3, sigma=0.5),       col=\"green\",       lwd=2,       add=TRUE) curve(pCJ2(x, mu=2.8, sigma=0.2),       col=\"blue\",       lwd=2,       add=TRUE) curve(pCJ2(x, mu=3.8, sigma=0.3),       col=\"lightblue\",       lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=2.75, sigma=0.1\",                             \"mu=2.3, sigma=0.5\",                             \"mu=2.8, sigma=0.2\",                             \"mu=3.8, sigma=0.3\"),        col=c( \"red\", \"green\",\"blue\",\"lightblue\"), lwd=2, cex=0.6)   # Example 3 # Checking the quantile function p <- seq(from=0.0001, to=0.99999, length.out=100) plot(x=qCJ2(p, mu=2.3, sigma=1.7), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\", main=\"Quantile function \") curve(pCJ2(x, mu=2.3, sigma=1.7),        from=0.0001, add=TRUE, col=\"red\", lwd=2.5)   # Example 4 # Comparing the random generator output with # the theoretical probabilities x <- rCJ2(n=10000, mu=1.5, sigma=2.5) hist(x, freq=FALSE) curve(dCJ2(x, mu=1.5, sigma=2.5), from=0.001, to=8,        add=TRUE, col=\"tomato\", lwd=2)   # Example 5 # The Hazard function curve(hCJ2(x, mu=0.85, sigma=0.15),       from=0.0001, to=5,       ylim=c(0, 1),       col=\"red\", lwd=2,       main=\"Hazard function\",       xlab=\"x\", ylab=\"f(x)\") curve(hCJ2(x, mu=1, sigma=0.05),       col=\"green\",       lwd=2,       add=TRUE) curve(hCJ2(x, mu=0.9, sigma=0.1),       col=\"blue\",       lwd=2,       add=TRUE) curve(hCJ2(x, mu=1.15, sigma=0.1),       col=\"lightblue\",       lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=0.85, sigma=0.15\",                                \"mu=1, sigma=0.05\",                                \"mu=0.9, sigma=0.1\",                                \"mu=1.15, sigma=0.1\"),        col=c( \"red\", \"green\",\"blue\",\"lightblue\"), lwd=2, cex=0.5)"},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":null,"dir":"Reference","previous_headings":"","what":"The Cosine Sine Exponential distribution — dCS2e","title":"The Cosine Sine Exponential distribution — dCS2e","text":"Density, distribution function, quantile function, random generation hazard function Cosine Sine Exponential distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Cosine Sine Exponential distribution — dCS2e","text":"","code":"dCS2e(x, mu, sigma, nu, log = FALSE)  pCS2e(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qCS2e(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rCS2e(n, mu, sigma, nu)  hCS2e(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Cosine Sine Exponential distribution — dCS2e","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Cosine Sine Exponential distribution — dCS2e","text":"dCS2e gives density, pCS2e gives distribution function, qCS2e gives quantile function, rCS2e generates random deviates hCS2e gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Cosine Sine Exponential distribution — dCS2e","text":"Cosine Sine Exponential Distribution parameters mu, sigma nu density given \\(f(x)=\\frac{\\pi \\sigma \\mu \\exp(\\frac{-x} {\\nu})}{2 \\nu [(\\mu\\sin(\\frac{\\pi}{2} \\exp(\\frac{-x} {\\nu})) + \\sigma\\cos(\\frac{\\pi}{2} \\exp(\\frac{-x} {\\nu}))]^2}, \\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Cosine Sine Exponential distribution — dCS2e","text":"Chesneau, C., Bakouch, H. S., & Hussain, T. (2019). new class probability distributions via cosine sine functions applications. Communications Statistics-Simulation Computation, 48(8), 2287-2300.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Cosine Sine Exponential distribution — dCS2e","text":"Juan Pablo Ramirez","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dCS2e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Cosine Sine Exponential distribution — dCS2e","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function par(mfrow=c(1,1)) curve(dCS2e(x, mu=1, sigma=0.1, nu =0.1), from=0, to=1,       ylim=c(0, 3), col=\"red\", las=1, ylab=\"f(x)\")         ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pCS2e(x, mu=1, sigma=0.1, nu =0.1),       from=0, to=1,  col=\"red\", las=1, ylab=\"F(x)\") curve(pCS2e(x, mu=1, sigma=0.1, nu =0.1, lower.tail=FALSE),       from=0, to=1, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qCS2e(p, mu=0.1, sigma=1, nu=0.1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pCS2e(x, mu=0.1, sigma=1, nu=0.1), from=0, add=TRUE, col=\"red\")  ## The random function hist(rCS2e(n=10000, mu=0.1, sigma=1, nu=0.1), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dCS2e(x, mu=0.1, sigma=1, nu=0.1), from=0, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hCS2e(x, mu=1, sigma=0.1, nu =0.1), from=0, to=1, ylim=c(0, 10),       col=2, ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Exponential Geometric distribution — dEEG","title":"The Extended Exponential Geometric distribution — dEEG","text":"Density, distribution function, quantile function, random generation hazard function Extended Exponential Geometric distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Exponential Geometric distribution — dEEG","text":"","code":"dEEG(x, mu, sigma, log = FALSE)  pEEG(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qEEG(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rEEG(n, mu, sigma)  hEEG(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Exponential Geometric distribution — dEEG","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Exponential Geometric distribution — dEEG","text":"dEEG gives density, pEEG gives distribution function, qEEG gives quantile function, rEEG generates random deviates hEEG gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Exponential Geometric distribution — dEEG","text":"Extended Exponential Geometric distribution parameters mu, sigmahas density given \\(f(x)= \\mu \\sigma \\exp(-\\mu x)(1 - (1 - \\sigma)\\exp(-\\mu x))^{-2},\\) \\(x > 0\\), \\(\\mu > 0\\) \\(\\sigma > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Exponential Geometric distribution — dEEG","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Adamidis, K., Dimitrakopoulou, T., & Loukas, S. (2005). extension exponential-geometric distribution. Statistics & probability letters, 73(3), 259-269.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Exponential Geometric distribution — dEEG","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Exponential Geometric distribution — dEEG","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  par(mfrow=c(1,1)) curve(dEEG(x, mu = 1, sigma =3), from = 0, to = 10,        col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pEEG(x, mu = 1, sigma =3), from = 0, to = 10,        ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pEEG(x, mu = 1, sigma =3, lower.tail = FALSE),        from = 0, to = 6, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qEEG(p = p, mu = 1, sigma =0.5), y = p,       xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pEEG(x, mu = 1, sigma =0.5), from = 0, add = TRUE,        col = \"red\")  ## The random function hist(rEEG(1000, mu = 1, sigma =1), freq = FALSE, xlab = \"x\",       ylim = c(0, 0.9), las = 1, main = \"\") curve(dEEG(x, mu = 1, sigma =1),  from = 0, add = TRUE,        col = \"red\", ylim = c(0, 0.8))   ## The Hazard function par(mfrow=c(1,1)) curve(hEEG(x, mu = 1, sigma =0.5), from = 0, to = 2,        col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":null,"dir":"Reference","previous_headings":"","what":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"Density, distribution function, quantile function, random generation hazard function four parameter Exponentiated Generalized Gamma distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"","code":"dEGG(x, mu, sigma, nu, tau, log = FALSE)  pEGG(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qEGG(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rEGG(n, mu, sigma, nu, tau)  hEGG(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"dEGG gives density, pEGG gives distribution function, qEGG gives quantile function, rEGG generates random deviates hEGG gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"Four-Parameter Exponentiated Generalized Gamma distribution parameters mu, sigma, nu tau density given \\(f(x) = \\frac{\\nu \\sigma}{\\mu \\Gamma(\\tau)} \\left(\\frac{x}{\\mu}\\right)^{\\sigma \\tau -1} \\exp\\left\\{ - \\left( \\frac{x}{\\mu} \\right)^\\sigma \\right\\} \\left\\{ \\gamma_1\\left( \\tau, \\left( \\frac{x}{\\mu} \\right)^\\sigma \\right) \\right\\}^{\\nu-1} ,\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Cordeiro, G. M., Ortega, E. M., & Silva, G. O. (2011). exponentiated generalized gamma distribution application lifetime data. Journal statistical computation simulation, 81(7), 827-842.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEGG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The four parameter Exponentiated Generalized Gamma distribution — dEGG","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dEGG(x, mu=0.1, sigma=0.8, nu=10, tau=1.5), from=0.000001, to=1.5, ylim=c(0, 2.5),       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pEGG(x, mu=0.1, sigma=0.8, nu=10, tau=1.5),       from=0.000001, to=1.5, col=\"red\", las=1, ylab=\"F(x)\") curve(pEGG(x, mu=0.1, sigma=0.8, nu=10, tau=1.5, lower.tail=FALSE),       from=0.000001, to=1.5, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qEGG(p, mu=0.1, sigma=0.8, nu=10, tau=1.5), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pEGG(x, mu=0.1, sigma=0.8, nu=10, tau=1.5),        from=0.00001, add=TRUE, col=\"red\")  ## The random function hist(rEGG(n=100, mu=0.1, sigma=0.8, nu=10, tau=1.5), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dEGG(x, mu=0.1, sigma=0.8, nu=10, tau=1.5),       from=0.0001, to=2, add=TRUE, col=\"red\")   ## The Hazard function curve(hEGG(x,  mu=0.1, sigma=0.8, nu=10, tau=1.5), from=0.0001, to=1.5,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":null,"dir":"Reference","previous_headings":"","what":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"Density, distribution function, quantile function, random generation hazard function Exponentiated Modifien Weibull Extension distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"","code":"dEMWEx(x, mu, sigma, nu, tau, log = FALSE)  pEMWEx(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qEMWEx(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rEMWEx(n, mu, sigma, nu, tau)  hEMWEx(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"dEMWEx gives density, pEMWEx gives distribution function, qEMWEx gives quantile function, rEMWEx generates random deviates hEMWEx gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"Exponentiated Modified Weibull Extension Distribution parameters mu, sigma, nu tau density given \\(f(x)= \\nu \\sigma \\tau (\\frac{x}{\\mu})^{\\sigma-1} \\exp((\\frac{x}{\\mu})^\\sigma + \\nu \\mu (1- \\exp((\\frac{x}{\\mu})^\\sigma))) (1 - \\exp (\\nu\\mu (1- \\exp((\\frac{x}{\\mu})^\\sigma))))^{\\tau-1} ,\\) \\(x > 0\\), \\(\\nu> 0\\), \\(\\mu > 0\\), \\(\\sigma> 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Sarhan, . M., & Apaloo, J. (2013). Exponentiated modified Weibull extension distribution. Reliability Engineering & System Safety, 112, 137-144.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEMWEx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Exponentiated Modified Weibull Extension distribution — dEMWEx","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dEMWEx(x, mu = 49.046, sigma =3.148, nu=0.00005, tau=0.1), from=0, to=100,       col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pEMWEx(x, mu = (1/4), sigma =1, nu=1, tau=2), from = 0, to = 1,        ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pEMWEx(x, mu = (1/4), sigma =1, nu=1, tau=2, lower.tail = FALSE),        from = 0, to = 1, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qEMWEx(p = p, mu = 49.046, sigma =3.148, nu=0.00005, tau=0.1), y = p,       xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pEMWEx(x, mu = 49.046, sigma =3.148, nu=0.00005, tau=0.1), from = 0, add = TRUE,        col = \"red\")  ## The random function hist(rEMWEx(1000, mu = (1/4), sigma =1, nu=1, tau=2), freq = FALSE, xlab = \"x\",       las = 1, main = \"\") curve(dEMWEx(x, mu = (1/4), sigma =1, nu=1, tau=2),  from = 0, add = TRUE,        col = \"red\", ylim = c(0, 0.5))   ## The Hazard function( par(mfrow=c(1,1)) curve(hEMWEx(x, mu = 49.046, sigma =3.148, nu=0.00005, tau=0.1), from = 0, to = 80,        col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/den_exw.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar den_exw function for the Ex-Wald distribution — den_exw","title":"Auxiliar den_exw function for the Ex-Wald distribution — den_exw","text":"function emulates dExWALD function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/den_exw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar den_exw function for the Ex-Wald distribution — den_exw","text":"","code":"den_exw(r, m, a, t)"},{"path":"http://ousuga.github.io/RelDists/reference/den_exw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar den_exw function for the Ex-Wald distribution — den_exw","text":"r value r. m value m. value . t value t.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/den_exw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliar den_exw function for the Ex-Wald distribution — den_exw","text":"returns vector probabilities.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"Density, distribution function, quantile function, random generation hazard function Extended Odd Fr?chet-Nadarajah-Haghighi distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"","code":"dEOFNH(x, mu, sigma, nu, tau, log = FALSE)  pEOFNH(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qEOFNH(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rEOFNH(n, mu, sigma, nu, tau)  hEOFNH(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"dEOFNH gives density, pEOFNH gives distribution function, qEOFNH gives quantile function, rEOFNH generates random numbers hEOFNH gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"Tthe Extended Odd Frechet-Nadarajah-Haghighi mu, sigma, nu tau density given \\(f(x)= \\frac{\\mu\\sigma\\nu\\tau(1+\\nu x)^{\\sigma-1}e^{(1-(1+\\nu x)^\\sigma)}[1-(1-e^{(1-(1+\\nu x)^\\sigma)})^{\\mu}]^{\\tau-1}}{(1-e^{(1-(1+\\nu x)^{\\sigma})})^{\\mu\\tau+1}} e^{-[(1-e^{(1-(1+\\nu x)^\\sigma)})^{-\\mu}-1]^{\\tau}},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\), \\(\\nu > 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"Nasiru, S. (2018). Extended Odd Fréchet‐G Family Distributions Journal Probability Statistics, 2018(1), 2931326.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"Helber Santiago Padilla, hspadillar@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEOFNH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Odd Frechet-Nadarajah-Haghighi — dEOFNH","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ##The probability density function par(mfrow=c(1, 1))  curve(dEOFNH(x, mu=18.5, sigma=5.1, nu=0.1, tau=0.1),        from=0, to=10, ylim=c(0, 0.25),        col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pEOFNH(x,mu=18.5, sigma=5.1, nu=0.1, tau=0.1), from = 0, to = 10,  ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pEOFNH(x, mu=18.5, sigma=5.1, nu=0.1, tau=0.1, lower.tail = FALSE),  from = 0, to = 10, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ##The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qEOFNH(p, mu=18.5, sigma=5.1, nu=0.1, tau=0.1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pEOFNH(x, mu=18.5, sigma=5.1, nu=0.1, tau=0.1), from=0, add=TRUE, col=\"red\")  ##The random function hist(rEOFNH(n=10000, mu=18.5, sigma=5.1, nu=0.1, tau=0.1), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dEOFNH(x, mu=18.5, sigma=5.1, nu=0.1, tau=0.1), from=0, add=TRUE, col=\"red\", ylim=c(0,1.25))   ##The Hazard function par(mfrow=c(1,1)) curve(hEOFNH(x, mu=18.5, sigma=5.1, nu=0.1, tau=0.1), from=0, to=10, ylim=c(0, 1),      col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Exponentiated Weibull distribution — dEW","title":"The Exponentiated Weibull distribution — dEW","text":"Density, distribution function, quantile function, random generation hazard function exponentiated Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Exponentiated Weibull distribution — dEW","text":"","code":"dEW(x, mu, sigma, nu, log = FALSE)  pEW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qEW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rEW(n, mu, sigma, nu)  hEW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Exponentiated Weibull distribution — dEW","text":"x, q vector quantiles. mu scale parameter. sigma, nu shape parameters. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Exponentiated Weibull distribution — dEW","text":"dEW gives density, pEW gives distribution function, qEW gives quantile function, rEW generates random deviates hEW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Exponentiated Weibull distribution — dEW","text":"Exponentiated Weibull Distribution parameters mu, sigma nu density given \\(f(x)=\\nu \\mu \\sigma x^{\\sigma-1} \\exp(-\\mu x^\\sigma) (1-\\exp(-\\mu x^\\sigma))^{\\nu-1},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Exponentiated Weibull distribution — dEW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dEW(x, mu=2, sigma=1.5, nu=0.5), from=0, to=2,       ylim=c(0, 2.5), col=\"red\", las=1, ylab=\"f(x)\")    ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pEW(x, mu=2, sigma=1.5, nu=0.5),        from=0, to=2,  col=\"red\", las=1, ylab=\"F(x)\") curve(pEW(x, mu=2, sigma=1.5, nu=0.5, lower.tail=FALSE),        from=0, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qEW(p, mu=2, sigma=1.5, nu=0.5), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pEW(x, mu=2, sigma=1.5, nu=0.5), from=0, add=TRUE, col=\"red\")  ## The random function hist(rEW(n=10000, mu=2, sigma=1.5, nu=0.5), freq=FALSE,       xlab=\"x\", las=1, main=\"\") curve(dEW(x, mu=2, sigma=1.5, nu=0.5), from=0, add=TRUE, col=\"red\")    ## The Hazard function par(mfrow=c(1,1)) curve(hEW(x, mu=2, sigma=1.5, nu=0.5), from=0, to=2, ylim=c(0, 7),        col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":null,"dir":"Reference","previous_headings":"","what":"The exponentiated XLindley distribution — dEXL","title":"The exponentiated XLindley distribution — dEXL","text":"Density, distribution function, quantile function, random generation hazard function exponentiated XLindley distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The exponentiated XLindley distribution — dEXL","text":"","code":"dEXL(x, mu, sigma, log = FALSE)  pEXL(q, mu, sigma, log.p = FALSE, lower.tail = TRUE)  qEXL(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rEXL(n, mu, sigma)  hEXL(x, mu, sigma, log = FALSE)"},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The exponentiated XLindley distribution — dEXL","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The exponentiated XLindley distribution — dEXL","text":"dEXL gives density, pEXL gives distribution function, qEXL gives quantile function, rEXL generates random deviates hEXL gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The exponentiated XLindley distribution — dEXL","text":"exponentiated XLindley parameters mu sigma density given \\(  f(x) = \\frac{\\sigma\\mu^2(2+\\mu + x)\\exp(-\\mu x)}{(1+\\mu)^2}\\left[1-  \\left(1+\\frac{\\mu x}{(1 + \\mu)^2}\\right) \\exp(-\\mu x)\\right] ^ {\\sigma-1} \\) \\(x \\geq 0\\), \\(\\mu \\geq 0\\) \\(\\sigma \\geq 0\\). Note: implementation changed original parameters \\(\\delta\\) \\(\\mu\\) \\(\\alpha\\) \\(\\sigma\\), implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The exponentiated XLindley distribution — dEXL","text":"Alomair, . M., Ahmed, M., Tariq, S., Ahsan-ul-Haq, M., & Talib, J. (2024). exponentiated XLindley distribution properties, inference applications. Heliyon, 10(3).","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The exponentiated XLindley distribution — dEXL","text":"Manuel Gutierrez Tangarife, mgutierrezta@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dEXL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The exponentiated XLindley distribution — dEXL","text":"","code":"# Example 1 # Plotting the mass function for different parameter values curve(dEXL(x, mu=0.5, sigma=0.5),        from=0, to=5,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dEXL(x, mu=1, sigma=0.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dEXL(x, mu=1.5, sigma=0.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=0.5\",                              \"mu=1.0, sigma=0.5\",                             \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    curve(dEXL(x, mu=0.5, sigma=1),        from=0, to=5,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dEXL(x, mu=1, sigma=1),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dEXL(x, mu=1.5, sigma=1),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=1\",                              \"mu=1.0, sigma=1\",                             \"mu=1.5, sigma=1\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)    curve(dEXL(x, mu=0.5, sigma=1.5),        from=0., to=8,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Density function\",       xlab=\"x\", ylab=\"f(x)\") curve(dEXL(x, mu=1, sigma=1.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(dEXL(x, mu=1.5, sigma=1.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"topright\", legend=c(\"mu=0.5, sigma=1.5\",                              \"mu=1.0, sigma=1.5\",                             \"mu=1.5, sigma=1.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.6)   # Example 2 # Checking if the cumulative curves converge to 1 curve(pEXL(x, mu=0.5, sigma=0.5),        from=0, to=5,       ylim=c(0, 1),        col=\"royalblue1\", lwd=2,        main=\"Cumulative Distribution Function\",       xlab=\"x\", ylab=\"f(x)\") curve(pEXL(x, mu=1, sigma=0.5),       col=\"tomato\",        lwd=2,       add=TRUE) curve(pEXL(x, mu=1.5, sigma=0.5),       col=\"seagreen\",       lwd=2,       add=TRUE) legend(\"bottomright\", legend=c(\"mu=0.5, sigma=0.5\",                                 \"mu=1.0, sigma=0.5\",                                \"mu=1.5, sigma=0.5\"),        col=c(\"royalblue1\", \"tomato\", \"seagreen\"), lwd=2, cex=0.5)    # Example 3 # The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qEXL(p, mu=2.3, sigma=1.7), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\", main=\"Quantile function \") curve(pEXL(x, mu=2.3, sigma=1.7),        from=0, add=TRUE, col=\"tomato\", lwd=2.5)   # Comparing quantile, density and cumulative p <- c(0.25, 0.5, 0.75) quantile <- qEXL(p=p, mu=2.3, sigma=1.7)   for(i in quantile){   print(integrate(dEXL, lower=0, upper=i, mu=2.3, sigma=1.7)) } #> 0.2500001 with absolute error < 4.9e-05 #> 0.5 with absolute error < 4.4e-05 #> 0.7500001 with absolute error < 0.00012  pEXL(q=quantile, mu=2.3, sigma=1.7) #> [1] 0.25 0.50 0.75  # Example 4 # The random function x <- rEXL(n=10000, mu=1.5, sigma=2.5) hist(x, freq=FALSE) curve(dEXL(x, mu=1.5, sigma=2.5), from=0, to=20,        add=TRUE, col=\"tomato\", lwd=2)   # Example 5 # The Hazard function curve(hEXL(x, mu=1.5, sigma=2), from=0.001, to=4,       col=\"tomato\", ylab=\"Hazard function\", las=1)"},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Weibull distribution — dExW","title":"The Extended Weibull distribution — dExW","text":"Density, distribution function, quantile function, random generation hazard function Extended Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Weibull distribution — dExW","text":"","code":"dExW(x, mu, sigma, nu, log = FALSE)  pExW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qExW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rExW(n, mu, sigma, nu)  hExW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Weibull distribution — dExW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Weibull distribution — dExW","text":"dExW gives density, pExW gives distribution function, qExW gives quantile function, rExW generates random deviates hExW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Weibull distribution — dExW","text":"Extended Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu x^{\\sigma -1} exp({-\\mu x^{\\sigma}})} {[1 -(1-\\nu) exp({-\\mu x^{\\sigma}})]^2},\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Weibull distribution — dExW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Zhang, T., & Xie, M. (2007). Failure data analysis extended Weibull distribution. Communications Statistics—Simulation Computation, 36(3), 579-592.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Weibull distribution — dExW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Weibull distribution — dExW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dExW(x, mu=0.3, sigma=2, nu=0.05), from=0.0001, to=2,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pExW(x, mu=0.3, sigma=2, nu=0.05),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"F(x)\") curve(pExW(x, mu=0.3, sigma=2, nu=0.05, lower.tail=FALSE),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qExW(p, mu=0.3, sigma=2, nu=0.05), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pExW(x, mu=0.3, sigma=2, nu=0.05),        from=0, add=TRUE, col=\"red\")  ## The random function hist(rExW(n=10000, mu=0.3, sigma=2, nu=0.05), freq=FALSE,      xlab=\"x\", ylim=c(0, 2), las=1, main=\"\") curve(dExW(x, mu=0.3, sigma=2, nu=0.05),       from=0.001, to=4, add=TRUE, col=\"red\")   ## The Hazard function curve(hExW(x, mu=0.3, sigma=2, nu=0.05), from=0.001, to=4,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Ex-Wald distribution — dExWALD","title":"The Ex-Wald distribution — dExWALD","text":"functions define density, distribution function, quantile function random generation Ex-Wald distribution parameter \\(\\mu\\), \\(\\sigma\\) \\(\\nu\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Ex-Wald distribution — dExWALD","text":"","code":"dExWALD(x, mu = 1.5, sigma = 1.5, nu = 2, log = FALSE)  pExWALD(q, mu = 1.5, sigma = 1.5, nu = 2, lower.tail = TRUE, log.p = FALSE)  qExWALD(p, mu = 1.5, sigma = 1.5, nu = 2)  rExWALD(n, mu = 1.5, sigma = 1.5, nu = 2)"},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Ex-Wald distribution — dExWALD","text":"x, q vector (non-negative integer) quantiles. mu vector mu parameter. sigma vector sigma parameter. nu vector nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number random values return.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Ex-Wald distribution — dExWALD","text":"dExWALD gives density, pExWALD gives distribution function, qExWALD gives quantile function, rExWALD generates random deviates.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Ex-Wald distribution — dExWALD","text":"Wald distribution parameters \\(\\mu\\), \\(\\sigma\\) \\(\\nu\\) density given \\(f(x |\\mu, \\sigma, \\nu) = \\frac{1}{\\nu} \\exp(\\frac{-x}{\\nu} + \\sigma(\\mu-k)) F_W(x|k, \\sigma) \\, \\text{} \\, k \\geq 0\\) \\(f(x |\\mu, \\sigma, \\nu) = \\frac{1}{\\nu} \\exp\\left( \\frac{-(\\sigma-\\mu)^2}{2x} \\right) Re \\left( w(k^\\prime \\sqrt{x/2} + \\frac{\\sigma }{\\sqrt{2x}}) \\right)  \\, \\text{} \\, k < 0\\) \\(k=\\sqrt{\\mu^2-\\frac{2}{\\nu}}\\), \\(k^\\prime=\\sqrt{\\frac{2}{\\nu}-\\mu^2}\\) \\(F_W\\) corresponds cumulative function Wald distribution. details expressions can found page 680 Heathcote (2004).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Ex-Wald distribution — dExWALD","text":"Schwarz, W. (2001). ex-Wald distribution descriptive model response times. Behavior Research Methods, Instruments, & Computers, 33, 457-469. Heathcote, . (2004). Fitting Wald ex-Wald distributions response time data: example using functions S-PLUS package. Behavior Research Methods, Instruments, & Computers, 36, 678-694.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Ex-Wald distribution — dExWALD","text":"Freddy Hernandez, fhernanb@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dExWALD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Ex-Wald distribution — dExWALD","text":"","code":"# Example 1 # Plotting the mass function for different parameter values curve(dExWALD(x, mu=0.15, sigma=52.5, nu=50), ylim=c(0, 0.005),       from=0, to=1200, col=\"cadetblue3\", las=1, ylab=\"f(x)\")  curve(dExWALD(x, mu=0.20, sigma=70, nu=50),       add=TRUE, col= \"purple\")  curve(dExWALD(x, mu=0.25, sigma=87.5, nu=50),       add=TRUE, col=\"goldenrod\")  curve(dExWALD(x, mu=0.20, sigma=70, nu=115),       add=TRUE, col=\"tomato\")  curve(dExWALD(x, mu=0.20, sigma=70, nu=35),       add=TRUE, col=\"blue\")  legend(\"topright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\",                          \"tomato\", \"blue\"),         lty=1, bty=\"n\",        legend=c(\"mu=0.15, sigma=52.5, nu=50\",                 \"mu=0.20, sigma=70.0, nu=50\",                 \"mu=0.25, sigma=87.5, nu=50\",                 \"mu=0.20, sigma=70.0, nu=115\",                 \"mu=0.20, sigma=70.0, nu=35\"))   # Example 2 # Checking if the cumulative curves converge to 1 curve(pExWALD(x, mu=0.15, sigma=52.5, nu=50), ylim=c(0, 1),       from=0, to=1200, col=\"cadetblue3\", las=1, ylab=\"F(x)\")  curve(pExWALD(x, mu=0.20, sigma=70, nu=50),       add=TRUE, col= \"purple\")  curve(pExWALD(x, mu=0.25, sigma=87.5, nu=50),       add=TRUE, col=\"goldenrod\")  curve(pExWALD(x, mu=0.20, sigma=70, nu=115),       add=TRUE, col=\"tomato\")  curve(pExWALD(x, mu=0.20, sigma=70, nu=35),       add=TRUE, col=\"blue\")  legend(\"bottomright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\",                          \"tomato\", \"blue\"),         lty=1, bty=\"n\",        legend=c(\"mu=0.15, sigma=52.5, nu=50\",                 \"mu=0.20, sigma=70.0, nu=50\",                 \"mu=0.25, sigma=87.5, nu=50\",                 \"mu=0.20, sigma=70.0, nu=115\",                 \"mu=0.20, sigma=70.0, nu=35\"))   # Example 3 # Checking the quantile function mu <- 5 sigma <- 3 nu <- 2 p <- seq(from=0.1, to=0.99, length.out=100) plot(x=qExWALD(p, mu=mu, sigma=sigma, nu=nu), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pExWALD(x, mu=mu, sigma=sigma, nu=nu), from=0, add=TRUE, col=\"red\")   # Example 4 # Comparing the random generator output with # the theoretical probabilities mu <- 0.2 sigma <- 70 nu <- 35 x <- rExWALD(n=10000, mu=mu, sigma=sigma, nu=nu) hist(x, freq=FALSE) curve(dExWALD(x, mu=mu, sigma=sigma, nu=nu), col=\"tomato\", add=TRUE)"},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Flexible Weibull Extension distribution — dFWE","title":"The Flexible Weibull Extension distribution — dFWE","text":"Density, distribution function, quantile function, random generation hazard function Flexible Weibull Extension distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Flexible Weibull Extension distribution — dFWE","text":"","code":"dFWE(x, mu, sigma, log = FALSE)  pFWE(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qFWE(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rFWE(n, mu, sigma)  hFWE(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Flexible Weibull Extension distribution — dFWE","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Flexible Weibull Extension distribution — dFWE","text":"dFWE gives density, pFWE gives distribution function, qFWE gives quantile function, rFWE generates random deviates hFWE gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Flexible Weibull Extension distribution — dFWE","text":"Flexible Weibull extension parameters mu sigma density given \\(f(x) = (\\mu + \\sigma/x^2) \\exp(\\mu x - \\sigma/x) \\exp(-\\exp(\\mu x-\\sigma/x))\\) x>0.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dFWE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Flexible Weibull Extension distribution — dFWE","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dFWE(x, mu=0.75, sigma=0.5), from=0, to=3,        ylim=c(0, 1.7), col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pFWE(x, mu=0.75, sigma=0.5), from=0, to=3,        col=\"red\", las=1, ylab=\"F(x)\") curve(pFWE(x, mu=0.75, sigma=0.5, lower.tail=FALSE),        from=0, to=3, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qFWE(p, mu=0.75, sigma=0.5), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pFWE(x, mu=0.75, sigma=0.5), from=0, add=TRUE, col=\"red\")  ## The random function hist(rFWE(n=1000, mu=2, sigma=0.5), freq=FALSE, xlab=\"x\",       ylim=c(0, 2), las=1, main=\"\") curve(dFWE(x, mu=2, sigma=0.5), from=0, to=3, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hFWE(x, mu=0.75, sigma=0.5), from=0, to=2, ylim=c(0, 2.5),        col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Gamma Weibull distribution — dGammaW","title":"The Gamma Weibull distribution — dGammaW","text":"Density, distribution function, quantile function, random generation hazard function Gamma Weibull distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Gamma Weibull distribution — dGammaW","text":"","code":"dGammaW(x, mu, sigma, nu, log = FALSE)  pGammaW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qGammaW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rGammaW(n, mu, sigma, nu)  hGammaW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Gamma Weibull distribution — dGammaW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Gamma Weibull distribution — dGammaW","text":"dGammaW gives density, pGammaW gives distribution function, qGammaW gives quantile function, rGammaW generates random deviates hGammaW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Gamma Weibull distribution — dGammaW","text":"Gamma Weibull Distribution parameters mu, sigma nu density given \\(f(x)= \\frac{\\sigma \\mu^{\\nu}}{\\Gamma(\\nu)} x^{\\nu \\sigma - 1} \\exp(-\\mu x^\\sigma),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Gamma Weibull distribution — dGammaW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Stacy, E. W. (1962). generalization gamma distribution. Annals mathematical statistics, 1187-1192.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Gamma Weibull distribution — dGammaW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGammaW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Gamma Weibull distribution — dGammaW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dGammaW(x, mu = 0.5, sigma = 2, nu=1), from = 0, to = 6,        col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pGammaW(x, mu = 0.5, sigma = 2, nu=1), from = 0, to = 3,  ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pGammaW(x, mu = 0.5, sigma = 2, nu=1, lower.tail = FALSE),  from = 0, to = 3, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qGammaW(p = p, mu = 0.5, sigma = 2, nu=1), y = p,  xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pGammaW(x, mu = 0.5, sigma = 2, nu=1), from = 0, add = TRUE,  col = \"red\")  ## The random function hist(rGammaW(1000, mu = 0.5, sigma = 2, nu=1), freq = FALSE, xlab = \"x\",  ylim = c(0, 1), las = 1, main = \"\") curve(dGammaW(x, mu = 0.5, sigma = 2, nu=1),  from = 0, add = TRUE,  col = \"red\", ylim = c(0, 1))   ## The Hazard function par(mfrow=c(1,1)) curve(hGammaW(x, mu = 0.5, sigma = 2, nu=1), from = 0, to = 2,  ylim = c(0, 1), col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Gompertz distribution — dGGD","title":"The Generalized Gompertz distribution — dGGD","text":"Density, distribution function, quantile function, random generation hazard function generalized Gompertz distribution parameters mu sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Gompertz distribution — dGGD","text":"","code":"dGGD(x, mu, sigma, nu, log = FALSE)  pGGD(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qGGD(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rGGD(n, mu, sigma, nu)  hGGD(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Gompertz distribution — dGGD","text":"x, q vector quantiles. mu, nu scale parameter. sigma shape parameters. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Gompertz distribution — dGGD","text":"dGGD gives density, pGGD gives distribution function, qGGD gives quantile function, rGGD generates random deviates hGGD gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Gompertz distribution — dGGD","text":"Generalized Gompertz  Distribution parameters mu, sigma nu density given \\(f(x)= \\nu \\mu \\exp(-\\frac{\\mu}{\\sigma}(\\exp(\\sigma x - 1))) (1 - \\exp(-\\frac{\\mu}{\\sigma}(\\exp(\\sigma x - 1))))^{(\\nu - 1)} ,\\) \\(x \\geq 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalized Gompertz distribution — dGGD","text":"El-Gohary, ., Alshamrani, ., & Al-Otaibi, . N. (2013). generalized Gompertz distribution. Applied mathematical modelling, 37(1-2), 13-24.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Generalized Gompertz distribution — dGGD","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGGD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Gompertz distribution — dGGD","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  par(mfrow = c(1, 1)) curve(dGGD(x, mu=1, sigma=0.3, nu=1.5), from = 0, to = 4,        col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pGGD(x, mu=1, sigma=0.3, nu=1.5), from = 0, to = 4,        ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pGGD(x, mu=1, sigma=0.3, nu=1.5, lower.tail = FALSE),        from = 0, to = 4, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qGGD(p=p, mu=1, sigma=0.3, nu=1.5), y = p,       xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pGGD(x, mu=1, sigma=0.3, nu=1.5), from = 0, add = TRUE,        col = \"red\")  ## The random function hist(rGGD(1000, mu=1, sigma=0.3, nu=1.5), freq = FALSE, xlab = \"x\",       las = 1, ylim = c(0, 0.7), main = \"\") curve(dGGD(x,mu=1, sigma=0.3, nu=1.5), from = 0, to =8, add = TRUE,        col = \"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hGGD(x, mu=1, sigma=0.3, nu=1.5), from = 0, to = 3, col = \"red\",       ylab = \"The hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Inverse Weibull distribution — dGIW","title":"The Generalized Inverse Weibull distribution — dGIW","text":"Density, distribution function, quantile function, random generation hazard function Generalized Inverse Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Inverse Weibull distribution — dGIW","text":"","code":"dGIW(x, mu, sigma, nu, log = FALSE)  pGIW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qGIW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rGIW(n, mu, sigma, nu)  hGIW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Inverse Weibull distribution — dGIW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Inverse Weibull distribution — dGIW","text":"dGIW gives density, pGIW gives distribution function, qGIW gives quantile function, rGIW generates random deviates hGIW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Inverse Weibull distribution — dGIW","text":"Generalized Inverse Weibull distribution mu, sigma nu density given \\(f(x) = \\nu \\sigma \\mu^{\\sigma} x^{-(\\sigma + 1)} exp \\{-\\nu (\\frac{\\mu}{x})^{\\sigma}\\},\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalized Inverse Weibull distribution — dGIW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. De Gusmao, F. R., Ortega, E. M., & Cordeiro, G. M. (2011). generalized inverse Weibull distribution. Statistical Papers, 52, 591-619.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Generalized Inverse Weibull distribution — dGIW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Inverse Weibull distribution — dGIW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dGIW(x, mu=3, sigma=5, nu=0.5), from=0.001, to=8,       col=\"red\", ylab=\"f(x)\", las=1)   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pGIW(x, mu=3, sigma=5, nu=0.5),       from=0.0001, to=14, col=\"red\", las=1, ylab=\"F(x)\") curve(pGIW(x, mu=3, sigma=5, nu=0.5, lower.tail=FALSE),       from=0.0001, to=14, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qGIW(p, mu=3, sigma=5, nu=0.5), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pGIW(x, mu=3, sigma=5, nu=0.5),       from=0, add=TRUE, col=\"red\")  ## The random function hist(rGIW(n=1000, mu=3, sigma=5, nu=0.5), freq=FALSE,      xlab=\"x\", ylim=c(0, 0.8), las=1, main=\"\") curve(dGIW(x, mu=3, sigma=5, nu=0.5),       from=0.001, to=14, add=TRUE, col=\"red\")   ## The Hazard function curve(hGIW(x, mu=3, sigma=5, nu=0.5), from=0.001, to=30,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized modified Weibull distribution — dGMW","title":"The Generalized modified Weibull distribution — dGMW","text":"Density, distribution function, quantile function, random generation hazard function generalized modified weibull distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized modified Weibull distribution — dGMW","text":"","code":"dGMW(x, mu, sigma, nu, tau, log = FALSE)  pGMW(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qGMW(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rGMW(n, mu, sigma, nu, tau)  hGMW(x, mu, sigma, nu, tau, log = FALSE)"},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized modified Weibull distribution — dGMW","text":"x, q vector quantiles. mu scale parameter. sigma shape parameter. nu shape parameter. tau acceleration parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized modified Weibull distribution — dGMW","text":"dGMW gives density, pGMW gives distribution function, qGMW gives quantile function, rGMW generates random deviates hGMW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized modified Weibull distribution — dGMW","text":"generalized modified weibull parameters mu, sigma, nu tau density given \\(f(x)= \\mu \\sigma x^{\\nu - 1}(\\nu + \\tau x) \\exp(\\tau x - \\mu x^{\\nu} e^{\\tau x}) [1 - \\exp(- \\mu x^{\\nu} e^{\\tau x})]^{\\sigma-1},\\) \\(x > 0\\).","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dGMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized modified Weibull distribution — dGMW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5), from=0, to=0.8,       ylim=c(0, 2), col=\"red\", las=1, ylab=\"f(x)\")     ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5),       from=0, to=1.2, col=\"red\", las=1, ylab=\"F(x)\") curve(pGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5, lower.tail=FALSE),       from=0, to=1.2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qGMW(p, mu=2, sigma=0.5, nu=2, tau=1.5), y=p, xlab=\"Quantile\",     las=1, ylab=\"Probability\") curve(pGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5), from=0, add=TRUE, col=\"red\")   ## The random function hist(rGMW(n=1000, mu=2, sigma=0.5, nu=2,tau=1.5), freq=FALSE,     xlab=\"x\", main =\"\", las=1) curve(dGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5),  from=0, add=TRUE, col=\"red\")    ## The Hazard function par(mfrow=c(1,1)) curve(hGMW(x, mu=2, sigma=0.5, nu=2, tau=1.5), from=0, to=1, ylim=c(0, 16),       col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Weibull distribution — dGWF","title":"Generalized Weibull distribution — dGWF","text":"Density, distribution function, quantile function, random generation hazard function generalized Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Weibull distribution — dGWF","text":"","code":"dGWF(x, mu, sigma, nu, log = FALSE)  pGWF(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qGWF(p, mu, sigma, nu)  rGWF(n, mu, sigma, nu)  hGWF(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Weibull distribution — dGWF","text":"x, q vector quantiles. mu parameter one. sigma parameter two. nu parameter three. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Weibull distribution — dGWF","text":"dGWF gives density, pGWF gives distribution function, qGWF gives quantile function, rGWF generates random deviates hGWF gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Weibull distribution — dGWF","text":"generalized Weibull parameters mu, sigma nu density given $$f(x) = \\mu \\sigma x^{\\sigma - 1}    \\left( 1 - \\mu \\nu x^\\sigma \\right)^{\\frac{1}{\\nu} - 1}$$ \\(x > 0\\), \\(\\mu>0\\), \\(\\sigma>0\\) \\(-\\infty<\\nu<\\infty\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Weibull distribution — dGWF","text":"Mudholkar, G. S., & Kollia, G. D. (1994). Generalized Weibull family: structural analysis. Communications statistics-theory methods, 23(4), 1149-1171.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Weibull distribution — dGWF","text":"Jaime Mosquera, jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dGWF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Weibull distribution — dGWF","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(     dGWF(x, mu = 5, sigma = 2, nu = -0.2),     from = 0, to = 5, col = \"red\", las = 1, ylab = \"f(x)\" )   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(     pGWF(x, mu = 5, sigma = 2, nu = -0.2),     from = 0, to = 5, ylim = c(0, 1),     col = \"red\", las = 1, ylab = \"F(x)\" ) curve(     pGWF(         x, mu = 5, sigma = 2, nu = -0.2,          lower.tail = FALSE     ),     from = 0, to = 5, ylim = c(0, 1),     col = \"red\", las = 1, ylab = \"R(x)\" )   ## The quantile function p <- seq(from = 0, to = 0.999, length.out = 100) plot(     x = qGWF(p, mu = 5, sigma = 2, nu = -0.2),     y = p, xlab = \"Quantile\", las = 1,     ylab = \"Probability\" ) curve(     pGWF(x, mu = 5, sigma = 2, nu = -0.2),     from = 0, add = TRUE, col = \"red\" )  ## The random function hist(     rGWF(n = 10000, mu = 5, sigma = 2, nu = -0.2),     freq = FALSE, xlab = \"x\", las = 1, main = \"\", ylim = c(0, 2.0) ) curve(dGWF(x, mu = 5, sigma = 2, nu = -0.2),     from = 0, add = TRUE, col = \"red\" )   ## The Hazard function par(mfrow = c(1, 1)) curve(     hGWF(x, mu = 0.003, sigma = 5e-6, nu = 0.025),     from = 0, to = 250, col = \"red\",      ylab = \"Hazard function\", las = 1 )   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Weibull distribution — dIW","title":"The Inverse Weibull distribution — dIW","text":"Density, distribution function, quantile function, random generation hazard function inverse weibull distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Weibull distribution — dIW","text":"","code":"dIW(x, mu, sigma, log = FALSE)  pIW(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qIW(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rIW(n, mu, sigma)  hIW(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Weibull distribution — dIW","text":"x, q vector quantiles. mu scale parameter. sigma shape parameters. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse Weibull distribution — dIW","text":"dIW gives density, pIW gives distribution function, qIW gives quantile function, rIW generates random deviates hIW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Weibull distribution — dIW","text":"inverse weibull distribution parameters mu sigma density given \\(f(x) = \\mu \\sigma x^{-\\sigma-1} \\exp(\\mu x^{-\\sigma})\\) \\(x > 0\\), \\(\\mu > 0\\) \\(\\sigma > 0\\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse Weibull distribution — dIW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Drapella, . (1993). complementary Weibull distribution: unknown just forgotten?. Quality reliability engineering international, 9(4), 383-385.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Inverse Weibull distribution — dIW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse Weibull distribution — dIW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dIW(x, mu=5, sigma=2.5), from=0, to=10,       ylim=c(0, 0.55), col=\"red\", las=1, ylab=\"f(x)\")  #' ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pIW(x, mu=5, sigma=2.5),       from=0, to=10,  col=\"red\", las=1, ylab=\"F(x)\") curve(pIW(x, mu=5, sigma=2.5, lower.tail=FALSE),       from=0, to=10, col=\"red\", las=1, ylab=\"R(x)\")               ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qIW(p, mu=5, sigma=2.5), y=p, xlab=\"Quantile\",   las=1, ylab=\"Probability\") curve(pIW(x, mu=5, sigma=2.5), from=0, add=TRUE, col=\"red\")    ## The random function hist(rIW(n=10000, mu=5, sigma=2.5), freq=FALSE, xlim=c(0,60),   xlab=\"x\", las=1, main=\"\") curve(dIW(x, mu=5, sigma=2.5), from=0, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hIW(x, mu=5, sigma=2.5), from=0, to=15, ylim=c(0, 0.9),    col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Kumaraswamy Inverse Weibull distribution — dKumIW","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"Density, distribution function, quantile function, random generation hazard function Kumaraswamy Inverse Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"","code":"dKumIW(x, mu, sigma, nu, log = FALSE)  pKumIW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qKumIW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rKumIW(n, mu, sigma, nu)  hKumIW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"dKumIW gives density, pKumIW gives distribution function, qKumIW gives quantile function, rKumIW generates random deviates hKumIW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"Kumaraswamy Inverse Weibull Distribution parameters mu, sigma nu density given \\(f(x)= \\mu \\sigma \\nu x^{-\\mu - 1} \\exp{- \\sigma x^{-\\mu}} (1 - \\exp{- \\sigma x^{-\\mu}})^{\\nu - 1},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Shahbaz, M. Q., Shahbaz, S., & Butt, N. S. (2012). Kumaraswamy Inverse Weibull Distribution. Pakistan journal statistics operation research, 479-489.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dKumIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Kumaraswamy Inverse Weibull distribution — dKumIW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  par(mfrow = c(1, 1)) curve(dKumIW(x, mu = 1.5, sigma=  1.5, nu = 1), from = 0, to = 8.5,        col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pKumIW(x, mu = 1.5, sigma=  1.5, nu = 1), from = 0, to = 8.5,        ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pKumIW(x, mu = 1.5, sigma=  1.5, nu = 1, lower.tail = FALSE),        from = 0, to = 6, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qKumIW(p=p, mu = 1.5, sigma=  1.5, nu = 10), y = p,       xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pKumIW(x, mu = 1.5, sigma=  1.5, nu = 10), from = 0, add = TRUE,        col = \"red\")  ## The random function hist(rKumIW(1000, mu = 1.5, sigma=  1.5, nu = 5), freq = FALSE, xlab = \"x\",       las = 1, ylim = c(0, 1.5), main = \"\") curve(dKumIW(x, mu = 1.5, sigma=  1.5, nu = 5), from = 0, to =8, add = TRUE,        col = \"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hKumIW(x, mu = 1.5, sigma=  1.5, nu = 1), from = 0, to = 3,        ylim = c(0, 0.7), col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":null,"dir":"Reference","previous_headings":"","what":"Lindley distribution — dLIN","title":"Lindley distribution — dLIN","text":"Density, distribution function, quantile function, random generation hazard function Lindley distribution parameter mu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lindley distribution — dLIN","text":"","code":"dLIN(x, mu, log = FALSE)  pLIN(q, mu, lower.tail = TRUE, log.p = FALSE)  qLIN(p, mu, lower.tail = TRUE, log.p = FALSE)  rLIN(n, mu)  hLIN(x, mu, log = FALSE)"},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lindley distribution — dLIN","text":"x, q vector quantiles. mu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lindley distribution — dLIN","text":"dLIN gives density, pLIN gives distribution function, qLIN gives quantile function, rLIN generates random deviates hLIN gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lindley distribution — dLIN","text":"Lindley Distribution parameter mu density given \\(f(x) = \\frac{\\mu^2}{\\mu+1} (1+x) \\exp(-\\mu x),\\) \\(x > 0\\) \\(\\mu > 0\\). function taken form LindleyR package.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lindley distribution — dLIN","text":"Lindley, D. V. (1958). Fiducial distributions Bayes' theorem. Journal Royal Statistical Society. Series B (Methodological), 102-107.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lindley distribution — dLIN","text":"Freddy Hernandez, fhernanb@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLIN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lindley distribution — dLIN","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dLIN(x, mu=1.5), from=0.0001, to=10,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pLIN(x, mu=2), from=0.0001, to=10, col=\"red\", las=1, ylab=\"F(x)\") curve(pLIN(x, mu=2, lower.tail=FALSE), from=0.0001,        to=10, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qLIN(p, mu=2), y=p, xlab=\"Quantile\", las=1, ylab=\"Probability\") curve(pLIN(x, mu=2), from=0, add=TRUE, col=\"red\")  ## The random function hist(rLIN(n=10000, mu=2), freq=FALSE, xlab=\"x\", las=1, main=\"\") curve(dLIN(x, mu=2), from=0.09, to=5, add=TRUE, col=\"red\")   ## The Hazard function curve(hLIN(x, mu=2), from=0.001, to=10, col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Log-Weibull distribution — dLW","title":"The Log-Weibull distribution — dLW","text":"Density, distribution function, quantile function, random generation hazard function Log-Weibull distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Log-Weibull distribution — dLW","text":"","code":"dLW(x, mu, sigma, log = FALSE)  pLW(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qLW(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rLW(n, mu, sigma)  hLW(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Log-Weibull distribution — dLW","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Log-Weibull distribution — dLW","text":"dLW gives density, pLW gives distribution function, qLW gives quantile function, rLW generates random deviates hLW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Log-Weibull distribution — dLW","text":"Log-Weibull Distribution parameters mu sigma density given \\(f(y)=(1/\\sigma) e^{((y - \\mu)/\\sigma)} exp\\{-e^{((y - \\mu)/\\sigma)}\\},\\) \\(-\\infty < y < \\infty\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Log-Weibull distribution — dLW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Gumbel, E. J. (1958). Statistics extremes. Columbia university press.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Log-Weibull distribution — dLW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dLW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Log-Weibull distribution — dLW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dLW(x, mu=0, sigma=1.5), from=-8, to=5,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pLW(x, mu=0, sigma=1.5),       from=-8, to=5,  col=\"red\", las=1, ylab=\"F(x)\") curve(pLW(x, mu=0, sigma=1.5, lower.tail=FALSE),       from=-8, to=5, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qLW(p, mu=0, sigma=1.5), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pLW(x, mu=0, sigma=1.5), from=-8, to=5, add=TRUE, col=\"red\")  ## The random function hist(rLW(n=10000, mu=0, sigma=1.5), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dLW(x, mu=0, sigma=1.5), from=-15, to=6, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hLW(x, mu=0, sigma=1.5), from=-8, to=7,       col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"Density, distribution function, quantile function, random generation hazard function Marshall-Olkin Extended Inverse Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"","code":"dMOEIW(x, mu, sigma, nu, log = FALSE)  pMOEIW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qMOEIW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rMOEIW(n, mu, sigma, nu)  hMOEIW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"dMOEIW gives density, pMOEIW gives distribution function, qMOEIW gives quantile function, rMOEIW generates random deviates hMOEIW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"Marshall-Olkin Extended Inverse Weibull distribution mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu x^{-(\\sigma + 1)} exp\\{{-\\mu x^{-\\sigma}}\\}}{\\{\\nu -(\\nu-1) exp\\{{-\\mu x ^{-\\sigma}}\\} \\}^{2}},\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"Okasha, H. M., El-Baz, . H., Tarabia, . M. K., & Basheer, . M. (2017). Extended inverse Weibull distribution reliability application. Journal Egyptian Mathematical Society, 25(3), 343-349.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Extended Inverse Weibull distribution — dMOEIW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dMOEIW(x, mu=0.6, sigma=1.7, nu=0.3), from=0, to=2,       col=\"red\", ylab=\"f(x)\", las=1)   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pMOEIW(x, mu=0.6, sigma=1.7, nu=0.3),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"F(x)\") curve(pMOEIW(x, mu=0.6, sigma=1.7, nu=0.3, lower.tail=FALSE),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qMOEIW(p, mu=0.6, sigma=1.7, nu=0.3), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pMOEIW(x, mu=0.6, sigma=1.7, nu=0.3),       from=0, add=TRUE, col=\"red\")  ## The random function hist(rMOEIW(n=1000, mu=0.6, sigma=1.7, nu=0.3), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dMOEIW(x, mu=0.6, sigma=1.7, nu=0.3),       from=0.001, to=4, add=TRUE, col=\"red\")   ## The Hazard function curve(hMOEIW(x, mu=0.5, sigma=0.7, nu=1), from=0.001, to=3,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Extended Weibull distribution — dMOEW","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"Density, distribution function, quantile function, random generation hazard function Marshall-Olkin Extended Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"","code":"dMOEW(x, mu, sigma, nu, log = FALSE)  pMOEW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qMOEW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rMOEW(n, mu, sigma, nu)  hMOEW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"dMOEW gives density, pMOEW gives distribution function, qMOEW gives quantile function, rMOEW generates random deviates hMOEW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"Marshall-Olkin Extended Weibull distribution mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu (\\nu x)^{\\sigma - 1} exp\\{{-(\\nu x )^{\\sigma}}\\}}{\\{1-(1-\\mu) exp\\{{-(\\nu x )^{\\sigma}}\\} \\}^{2}},\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Ghitany, M. E., Al-Hussaini, E. K., & Al-Jarallah, R. . (2005). Marshall–Olkin extended Weibull distribution application censored data. Journal Applied Statistics, 32(10), 1025-1034.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOEW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Extended Weibull distribution — dMOEW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dMOEW(x, mu=0.5, sigma=0.7, nu=1), from=0.001, to=1,       col=\"red\", ylab=\"f(x)\", las=1)   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pMOEW(x, mu=0.5, sigma=0.7, nu=1),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"F(x)\") curve(pMOEW(x, mu=0.5, sigma=0.7, nu=1, lower.tail=FALSE),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qMOEW(p, mu=0.5, sigma=0.7, nu=1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pMOEW(x, mu=0.5, sigma=0.7, nu=1),       from=0, add=TRUE, col=\"red\")  ## The random function hist(rMOEW(n=100, mu=0.5, sigma=0.7, nu=1), freq=FALSE,      xlab=\"x\", ylim=c(0, 1), las=1, main=\"\") curve(dMOEW(x, mu=0.5, sigma=0.7, nu=1),       from=0.001, to=2, add=TRUE, col=\"red\")   ## The Hazard function curve(hMOEW(x, mu=0.5, sigma=0.7, nu=1), from=0.001, to=3,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Kappa distribution — dMOK","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"Desnsity, distribution function, quantile function, random generation hazard function Marshall-Olkin Kappa distribution parameters mu, sigma, nu tau.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"","code":"dMOK(x, mu, sigma, nu, tau, log = FALSE)  pMOK(q, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  qMOK(p, mu, sigma, nu, tau, lower.tail = TRUE, log.p = FALSE)  rMOK(n, mu, sigma, nu, tau)  hMOK(x, mu, sigma, nu, tau)"},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"dMOK gives density, pMOK gives distribution function, qMOK gives quantile function, rMOK generates random deviates hMOK gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"Marshall-Olkin Kappa distribution parameters mu, sigma, nu tau density given : \\(f(x)=\\frac{\\tau\\frac{\\mu\\nu}{\\sigma}\\left(\\frac{x}{\\sigma}\\right)^{\\nu-1} \\left(\\mu+\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}\\right)^{-\\frac{\\mu+1}{\\mu}}}{\\left[\\tau+(1-\\tau)\\left(\\frac{\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}}{\\mu+\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}}\\right)^{\\frac{1}{\\mu}}\\right]^2}\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"Javed, M., Nawaz, T., & Irfan, M. (2019). Marshall-Olkin kappa distribution: properties applications. Journal King Saud University-Science, 31(4), 684-691.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"Angel Muñoz,","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMOK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Kappa distribution — dMOK","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function par(mfrow = c(1,1)) curve(dMOK(x = x, mu = 1, sigma = 3.5, nu = 3, tau = 2), from = 0, to = 15,       ylab = 'f(x)', col = 2, las = 1)   ## The cumulative distribution and the Reliability function  par(mfrow = c(1,2)) curve(pMOK(q = x, mu = 1, sigma = 2.5, nu = 3, tau = 2), from = 0, to = 10,      col = 2, lwd = 2, las = 1, ylab = 'F(x)') curve(pMOK(q = x, mu = 1, sigma = 2.5, nu = 3, tau = 2, lower.tail = FALSE), from = 0, to = 10,       col = 2, lwd = 2, las = 1, ylab = 'R(x)')   ## The quantile function p <- seq(from = 0.00001, to = 0.99999, length.out = 100) plot(x = qMOK(p = p, mu = 4, sigma = 2.5, nu = 3, tau = 2), y = p, xlab = 'Quantile',      las = 1, ylab = 'Probability') curve(pMOK(q = x, mu = 4, sigma = 2.5, nu = 3, tau = 2), from = 0, to = 15,       add = TRUE, col = 2)  ## The random function  hist(rMOK(n = 10000, mu = 1, sigma = 2.5, nu = 3, tau = 2), freq = FALSE,      xlab = \"x\", las = 1, main = '', ylim = c(0,.3), xlim = c(0,20), breaks = 50) curve(dMOK(x, mu = 1, sigma = 2.5, nu = 3, tau = 2), from = 0, to = 15, add = TRUE, col = 2)   ## The Hazard function  par(mfrow = c(1,1)) curve(hMOK(x = x, mu = 1, sigma = 2.5, nu = 3, tau = 2), from = 0, to = 20,       col = 2, ylab = 'Hazard function', las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Modified Weibull distribution — dMW","title":"The Modified Weibull distribution — dMW","text":"Density, distribution function, quantile function, random generation hazard function modified weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Modified Weibull distribution — dMW","text":"","code":"dMW(x, mu, sigma, nu, log = FALSE)  pMW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qMW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rMW(n, mu, sigma, nu)  hMW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Modified Weibull distribution — dMW","text":"x, q vector quantiles. mu shape parameter one. sigma parameter two. nu scale parameter three. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Modified Weibull distribution — dMW","text":"dMW gives density, pMW gives distribution function, qMW gives quantile function, rMW generates random deviates hMW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Modified Weibull distribution — dMW","text":"modified weibull distribution parameters mu, sigma nu density given \\(f(x) = \\mu (\\sigma + \\nu x) x^{\\sigma - 1} \\exp(\\nu x) \\exp(-\\mu x^{\\sigma} \\exp(\\nu x))\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu \\geq 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Modified Weibull distribution — dMW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Lai, C. D., Xie, M., & Murthy, D. N. P. (2003). modified Weibull distribution. IEEE Transactions reliability, 52(1), 33-37.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Modified Weibull distribution — dMW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Modified Weibull distribution — dMW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dMW(x, mu=2, sigma=1.5, nu=0.2), from=0, to=2,   ylim=c(0, 1.5), col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pMW(x, mu=2, sigma=1.5, nu=0.2), from=0, to=2,  col = \"red\", las=1, ylab=\"F(x)\") curve(pMW(x, mu=2, sigma=1.5, nu=0.2, lower.tail = FALSE),  from=0, to=2, col=\"red\", las=1, ylab =\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.9999, length.out=100) plot(x=qMW(p, mu=2, sigma=1.5, nu=0.2), y=p, xlab=\"Quantile\",  las=1, ylab=\"Probability\") curve(pMW(x, mu=2, sigma=1.5, nu=0.2), from=0, add=TRUE, col=\"red\")  ## The random function hist(rMW(n=1000, mu=2, sigma=1.5, nu=0.2), freq=FALSE,  xlab=\"x\", las=1, main=\"\") curve(dMW(x, mu=2, sigma=1.5, nu=0.2), from=0, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hMW(x, mu=2, sigma=1.5, nu=0.2), from=0, to=1.5, ylim=c(0, 5),  col=\"red\", las=1, ylab=\"H(x)\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":null,"dir":"Reference","previous_headings":"","what":"The New Exponentiated Exponential distribution — dNEE","title":"The New Exponentiated Exponential distribution — dNEE","text":"Density, distribution function, quantile function, random generation hazard function two-parameter New Exponentiated Exponential parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The New Exponentiated Exponential distribution — dNEE","text":"","code":"dNEE(x, mu = 1, sigma = 1, log = FALSE)  pNEE(q, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  qNEE(p, mu = 1, sigma = 1, lower.tail = TRUE, log.p = FALSE)  rNEE(n = 1, mu = 1, sigma = 1)  hNEE(x, mu, sigma, log = FALSE)"},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The New Exponentiated Exponential distribution — dNEE","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities \\(P[X <= x]\\), otherwise, \\(P[X > x]\\). p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The New Exponentiated Exponential distribution — dNEE","text":"dNEE gives density, pNEE gives distribution function, qNEE gives quantile function, rNEE generates random deviates hNEE gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The New Exponentiated Exponential distribution — dNEE","text":"New Exponentiated Exponential distribution parameters mu sigma density given \\(f(x | \\mu, \\sigma) = \\log(2^\\sigma) \\mu \\exp(-\\mu x) (1-\\exp(-\\mu x))^{\\sigma-1} 2^{(1-\\exp(-\\mu x))^\\sigma}, \\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). Note: implementation changed original parameters \\(\\theta\\) \\(\\mu\\) \\(\\alpha\\) \\(\\sigma\\), implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The New Exponentiated Exponential distribution — dNEE","text":"Hassan, Anwar, . H. Dar, M. . Lone. \"New Class Probability Distributions Application Engineering Data.\" Pakistan Journal Statistics Operation Research 20.2 (2024): 217-231.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The New Exponentiated Exponential distribution — dNEE","text":"Juliana Garcia, juliana.garciav@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dNEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The New Exponentiated Exponential distribution — dNEE","text":"","code":"# Example 1 # Plotting the mass function for different parameter values curve(dNEE(x, mu=0.2, sigma=0.3),       from=0, to=8, col=\"cadetblue3\", las=1, ylab=\"f(x)\")  curve(dNEE(x, mu=1, sigma=4),       add=TRUE, col= \"purple\")  curve(dNEE(x, mu=1.5, sigma=22),       add=TRUE, col=\"goldenrod\")  curve(dNEE(x, mu=0.5, sigma=2),       add=TRUE, col=\"green3\")  legend(\"topright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\", \"green3\"), lty=1, bty=\"n\",        legend=c(\"mu=0.2, sigma=0.3\",                 \"mu=1.0, sigma=4\",                 \"mu=1.5, sigma=22\",                 \"mu=0.5, sigma=2\"))   # Example 2 # Checking if the cumulative curves converge to 1 curve(pNEE(x, mu=0.2, sigma=0.3), ylim=c(0, 1),       from=0, to=8, col=\"cadetblue3\", las=1, ylab=\"F(x)\")  curve(pNEE(x, mu=1, sigma=4),       add=TRUE, col= \"purple\")  curve(pNEE(x, mu=1.5, sigma=22),       add=TRUE, col=\"goldenrod\")  curve(pNEE(x, mu=0.5, sigma=2),       add=TRUE, col=\"green3\")  legend(\"bottomright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\", \"green3\"), lty=1, bty=\"n\",        legend=c(\"mu=0.2, sigma=0.3\",                 \"mu=1.0, sigma=4\",                 \"mu=1.5, sigma=22\",                 \"mu=0.5, sigma=2\"))   # Example 3 # Checking the quantile function mu <- 0.5 sigma <- 2 p <- seq(from=0, to=0.999, length.out=100) plot(x=qNEE(p, mu=mu, sigma=sigma), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pNEE(x, mu=mu, sigma=sigma), from=0, add=TRUE, col=\"red\")   # Example 4 # Comparing the random generator output with # the theoretical probabilities mu <- 0.5 sigma <- 2 x <- rNEE(n=10000, mu=mu, sigma=sigma) hist(x, freq=FALSE) curve(dNEE(x, mu=mu, sigma=sigma), col=\"tomato\", add=TRUE)"},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Odd Weibull Distribution — dOW","title":"The Odd Weibull Distribution — dOW","text":"Density, distribution function, quantile function, random generation hazard function Odd Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Odd Weibull Distribution — dOW","text":"","code":"dOW(x, mu, sigma, nu, log = FALSE)  pOW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qOW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rOW(n, mu, sigma, nu)  hOW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Odd Weibull Distribution — dOW","text":"x, q vector quantiles. mu parameter one. sigma parameter two. nu parameter three. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[T <= t], otherwise, P[T > t]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Odd Weibull Distribution — dOW","text":"dOW gives density, pOW gives distribution function, qOW gives quantile function, rOW generates random deviates gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Odd Weibull Distribution — dOW","text":"Odd Weibull parameters mu, sigma nu density given \\(f(x) = \\left( \\frac{\\sigma\\nu}{x} \\right) (\\mu x)^\\sigma      e^{(\\mu x)^\\sigma} \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^{\\nu-1}      \\left[ 1 + \\left(e^{(\\mu x)^{\\sigma}}-1\\right)^\\nu \\right]^{-2}\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Odd Weibull Distribution — dOW","text":"Cooray, K. (2006). Generalization Weibull distribution: odd Weibull family. Statistical Modelling, 6(3), 265-277.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Odd Weibull Distribution — dOW","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dOW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Odd Weibull Distribution — dOW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dOW(x, mu=2, sigma=3, nu=0.2), from=0, to=4, ylim=c(0, 2),        col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pOW(x, mu=2, sigma=3, nu=0.2), from=0, to=4, ylim=c(0, 1),        col=\"red\", las=1, ylab=\"F(x)\") curve(pOW(x, mu=2, sigma=3, nu=0.2, lower.tail=FALSE), from=0,        to=4,  ylim=c(0, 1), col=\"red\", las=1,        ylab = \"R(x)\")   ## The quantile function p <- seq(from=0, to=0.998, length.out=100) plot(x = qOW(p, mu=2, sigma=3, nu=0.2), y=p, xlab=\"Quantile\", las=1,       ylab=\"Probability\") curve(pOW(x, mu=2, sigma=3, nu=0.2), from=0, add=TRUE, col=\"red\")  ## The random function hist(rOW(n=10000, mu=2, sigma = 3, nu = 0.2), freq=FALSE, ylim = c(0, 2),      xlab = \"x\", las = 1, main = \"\") curve(dOW(x, mu=2, sigma=3, nu=0.2),  from=0, ylim=c(0, 2), add=TRUE,       col = \"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hOW(x, mu=2, sigma=3, nu=0.2), from=0, to=2.5, ylim=c(0, 3),       col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":null,"dir":"Reference","previous_headings":"","what":"The Power Lindley distribution — dPL","title":"The Power Lindley distribution — dPL","text":"Density, distribution function, quantile function, random generation hazard function Power Lindley distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Power Lindley distribution — dPL","text":"","code":"dPL(x, mu, sigma, log = FALSE)  pPL(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qPL(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rPL(n, mu, sigma)  hPL(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Power Lindley distribution — dPL","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Power Lindley distribution — dPL","text":"dPL gives density, pPL gives distribution function, qPL gives quantile function, rPL generates random deviates hPL gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Power Lindley distribution — dPL","text":"Power Lindley Distribution parameters mu sigma density given \\(f(x) = \\frac{\\mu \\sigma^2}{\\sigma + 1} (1 + x^\\mu) x ^ {\\mu - 1} \\exp({-\\sigma x ^\\mu}),\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Power Lindley distribution — dPL","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Ghitany, M. E., Al-Mutairi, D. K., Balakrishnan, N., & Al-Enezi, L. J. (2013). Power Lindley distribution associated inference. Computational Statistics & Data Analysis, 64, 20-33.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Power Lindley distribution — dPL","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dPL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Power Lindley distribution — dPL","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dPL(x, mu=1.5, sigma=0.2), from=0.1, to=10,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pPL(x, mu=1.5, sigma=0.2),       from=0.1, to=10, col=\"red\", las=1, ylab=\"F(x)\") curve(pPL(x, mu=1.5, sigma=0.2, lower.tail=FALSE),       from=0.1, to=10, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qPL(p, mu=1.5, sigma=0.2), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pPL(x, mu=1.5, sigma=0.2), from=0.1, add=TRUE, col=\"red\")  ## The random function hist(rPL(n=1000, mu=1.5, sigma=0.2), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dPL(x, mu=1.5, sigma=0.2), from=0.1, to=15, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hPL(x, mu=1.5, sigma=0.2), from=0.1, to=15,       col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":null,"dir":"Reference","previous_headings":"","what":"The Quasi XGamma Poisson distribution — dQXGP","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"Density, distribution function,quantile function, random generation hazard function Quasi XGamma Poisson distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"","code":"dQXGP(x, mu, sigma, nu, log = FALSE)  pQXGP(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qQXGP(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rQXGP(n, mu, sigma, nu)  hQXGP(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"dQXGP gives density, pQXGP gives distribution function, qQXGP gives quantile function, rQXGP generates random deviates hQXGP gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"Quasi XGamma Poisson distribution parameters mu, sigma nu density given : \\(f(x)= K(\\mu, \\sigma, \\nu)(\\frac {\\sigma^{2} x^{2}}{2} + \\mu)  exp(\\frac{\\nu exp(-\\sigma x)(1 + \\mu + \\sigma x + \\frac {\\sigma^{2}x^{2}}{2})}{1+\\mu} - \\sigma x),\\) \\(x > 0\\), \\(\\mu> 0\\), \\(\\sigma> 0\\), \\(\\nu> 1\\). \\(K(\\mu, \\sigma, \\nu) = \\frac{\\nu \\sigma}{(exp(\\nu)-1)(1+\\mu)}\\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"Sen, S., Korkmaz, M. Ç., & Yousof, H. M. (2018). quasi XGamma-Poisson distribution: properties application. Istatistik Journal Turkish Statistical Association, 11(3), 65-76.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"Simon Zapata","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dQXGP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Quasi XGamma Poisson distribution — dQXGP","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dQXGP(x, mu=0.5, sigma=1, nu=1), from=0.1, to=8,       ylim=c(0, 0.6), col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pQXGP(x, mu=0.5, sigma=1, nu=1),       from=0.1, to=8,  col=\"red\", las=1, ylab=\"F(x)\") curve(pQXGP(x,  mu=0.5, sigma=1, nu=1, lower.tail=FALSE),       from=0.1, to=8, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qQXGP(p, mu=0.5, sigma=1, nu=1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pQXGP(x, mu=0.5, sigma=1, nu=1),       from=0.1, add=TRUE, col=\"red\")        ## The random function hist(rQXGP(n=1000, mu=0.5, sigma=1, nu=1), freq=FALSE,      xlab=\"x\", ylim=c(0, 0.4), las=1, main=\"\", xlim=c(0, 15)) curve(dQXGP(x, mu=0.5, sigma=1, nu=1),       from=0.001, to=500, add=TRUE, col=\"red\")   ## The Hazard function curve(hQXGP(x, mu=0.5, sigma=1, nu=1), from=0.01, to=3,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Reduced New Modified Weibull distribution — dRNMW","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"Density, distribution function, quantile function, random generation hazard function reduced new modified Weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"","code":"dRNMW(x, mu, sigma, nu, log = FALSE)  pRNMW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qRNMW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rRNMW(n, mu, sigma, nu)  hRNMW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"x, q vector quantiles. mu parameter one. sigma parameter two. nu parameter three. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[T <= t], otherwise, P[T > t]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"dRNMW gives density, pRNMW gives distribution function, qRNMW gives quantile function, rRNMW generates random deviates hRNMW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"reduced new modified Weibull parameters mu, sigma nu density given $$f(x) = \\frac{1}{2 \\sqrt{x}}    \\left( \\mu + \\sigma (1 + 2 \\nu x) e^{\\nu x} \\right)    e^{-\\mu \\sqrt{x} - \\sigma \\sqrt{x} e^{\\nu x}}$$ \\(x > 0\\), \\(\\mu>0\\), \\(\\sigma>0\\) \\(\\nu>0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"Almalki, S. J. (2018). reduced new modified Weibull distribution. Communications Statistics-Theory Methods, 47(10), 2297-2313.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"Jaime Mosquera, jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRNMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Reduced New Modified Weibull distribution — dRNMW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(     dRNMW(x, mu = 0.05, sigma = 0.00025, nu = 2.2),     from = 0, to = 5, col = \"red\", las = 1, ylab = \"f(x)\" )   ## The cualphalative distribution and the Reliability function par(mfrow = c(1, 2)) curve(     pRNMW(x, mu = 0.05, sigma = 0.00025, nu = 2.2),     from = 0, to = 5, ylim = c(0, 1),     col = \"red\", las = 1, ylab = \"F(x)\" ) curve(     pRNMW(         x, mu = 0.05, sigma = 0.00025, nu = 2.2,          lower.tail = FALSE     ),     from = 0, to = 5, ylim = c(0, 1),     col = \"red\", las = 1, ylab = \"R(x)\" )   ## The quantile function p <- seq(from = 0, to = 0.999, length.out = 100) plot(     x = qRNMW(p, mu = 0.05, sigma = 0.00025, nu = 2.2),     y = p, xlab = \"Quantile\", las = 1,     ylab = \"Probability\" ) curve(     pRNMW(x, mu = 0.05, sigma = 0.00025, nu = 2.2),     from = 0, add = TRUE, col = \"red\" )  ## The random function hist(     rRNMW(n = 10000, mu = 0.05, sigma = 0.00025, nu = 2.2),     freq = FALSE, xlab = \"x\", las = 1, main = \"\", ylim = c(0,0.8) ) curve(dRNMW(x, mu = 0.05, sigma = 0.00025, nu = 2.2),     from = 0, add = TRUE, col = \"red\" )   ## The Hazard function par(mfrow = c(1, 1)) curve(     hRNMW(x, mu = 0.003, sigma = 5e-6, nu = 0.025),     from = 0, to = 250, col = \"red\",      ylab = \"Hazard function\", las = 1 )   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Reflected Weibull distribution — dRW","title":"The Reflected Weibull distribution — dRW","text":"Density, distribution function, quantile function, random generation hazard function Reflected Weibull Distribution parameters mu sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Reflected Weibull distribution — dRW","text":"","code":"dRW(x, mu, sigma, log = FALSE)  pRW(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qRW(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rRW(n, mu, sigma)  hRW(x, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Reflected Weibull distribution — dRW","text":"x, q vector quantiles. mu parameter. sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Reflected Weibull distribution — dRW","text":"dRW gives density, pRW gives distribution function, qRW gives quantile function, rRW generates random deviates hRW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Reflected Weibull distribution — dRW","text":"Reflected Weibull Distribution parameters mu sigma density given \\(f(x) = \\mu \\sigma (-x) ^{\\sigma - 1} e^{-\\mu(-x)^\\sigma},\\) \\(x < 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Reflected Weibull distribution — dRW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Cohen, . C. (1973). reflected Weibull distribution. Technometrics, 15(4), 867-873.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Reflected Weibull distribution — dRW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dRW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Reflected Weibull distribution — dRW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dRW(x, mu=1, sigma=1), from=-5, to=-0.01,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pRW(x, mu=1, sigma=1),       from=-5, to=-0.01, col=\"red\", las=1, ylab=\"F(x)\") curve(pRW(x, mu=1, sigma=1, lower.tail=FALSE),       from=-5, to=-0.01, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qRW(p, mu=1, sigma=1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pRW(x, mu=1, sigma=1), from=-5, add=TRUE, col=\"red\")  ## The random function hist(rRW(n=10000, mu=1, sigma=1), freq=FALSE,      xlab=\"x\", las=1, main=\"\") curve(dRW(x, mu=1, sigma=1), from=-5, to=-0.01, add=TRUE, col=\"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hRW(x, mu=1, sigma=1), from=-0.3, to=-0.01,       col=\"red\", ylab=\"Hazard function\", las=1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"Density, distribution function, quantile function, random generation hazard function Sarhan Zaindins modified weibull distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"","code":"dSZMW(x, mu, sigma, nu, log = FALSE)  pSZMW(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qSZMW(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rSZMW(n, mu, sigma, nu)  hSZMW(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"x, q vector quantiles. mu scale parameter. sigma shape parameter. nu shape parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"dSZMW gives density, pSZMW gives distribution function, qSZMW gives quantile function, rSZMW generates random deviates hSZMW gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"Sarhan Zaindins modified weibull parameters mu, sigma nu density given \\(f(x)=(\\mu + \\sigma \\nu x^(\\nu - 1)) \\exp(- \\mu x - \\sigma x^\\nu)\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Sarhan, . M., & Zaindin, M. (2009). Modified Weibull distribution. APPS. Applied Sciences, 11, 123-136.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dSZMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Sarhan and Zaindin's Modified Weibull distribution — dSZMW","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dSZMW(x, mu = 2, sigma = 1.5, nu = 0.2), from = 0, to = 2,        ylim = c(0, 1.7), col = \"red\", las = 1, ylab = \"f(x)\")  ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pSZMW(x, mu = 2, sigma = 1.5, nu = 0.2), from = 0, to = 2, ylim = c(0, 1),       col = \"red\", las = 1, ylab = \"F(x)\") curve(pSZMW(x, mu = 2, sigma = 1.5, nu = 0.2, lower.tail = FALSE), from = 0,       to = 2, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qSZMW(p = p, mu = 2, sigma = 1.5, nu = 0.2), y = p, xlab = \"Quantile\",      las = 1, ylab = \"Probability\") curve(pSZMW(x, mu = 2, sigma = 1.5, nu = 0.2), from = 0, add = TRUE, col = \"red\")  ## The random function hist(rSZMW(n = 1000, mu = 2, sigma = 1.5, nu = 0.2), freq = FALSE, xlab = \"x\",      las = 1, main = \"\") curve(dSZMW(x, mu = 2, sigma = 1.5, nu = 0.2),  from = 0, add = TRUE, col = \"red\")   ## The Hazard function par(mfrow=c(1,1)) curve(hSZMW(x, mu = 2, sigma = 1.5, nu = 0.2), from = 0, to = 3, ylim = c(0, 8),       col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Wald distribution — dWALD","title":"The Wald distribution — dWALD","text":"functions define density, distribution function, quantile function random generation Wald distribution parameter \\(\\mu\\) \\(\\sigma\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Wald distribution — dWALD","text":"","code":"dWALD(x, mu, sigma, log = FALSE)  pWALD(q, mu, sigma, lower.tail = TRUE, log.p = FALSE)  qWALD(p, mu, sigma, lower.tail = TRUE, log.p = FALSE)  rWALD(n, mu, sigma)"},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Wald distribution — dWALD","text":"x, q vector (non-negative integer) quantiles. mu vector mu parameter. sigma vector sigma parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number random values return.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Wald distribution — dWALD","text":"dWALD gives density, pWALD gives distribution function, qWALD gives quantile function, rWALD generates random deviates.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Wald distribution — dWALD","text":"Wald distribution parameters \\(\\mu\\) \\(\\sigma\\) density given \\(f(x |\\mu, \\sigma)=\\frac{\\sigma}{\\sqrt{2 \\pi x^3}} \\exp \\left[-\\frac{(\\sigma-\\mu x)^2}{2x}\\right ],\\) \\(x < 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Wald distribution — dWALD","text":"Heathcote, . (2004). Fitting Wald ex-Wald distributions response time data: example using functions S-PLUS package. Behavior Research Methods, Instruments, & Computers, 36, 678-694.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Wald distribution — dWALD","text":"Sofia Cuartas, scuartasg@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWALD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Wald distribution — dWALD","text":"","code":"# Example 1 # Plotting the mass function for different parameter values curve(dWALD(x, mu=1, sigma=1),       from=0, to=3, col=\"cadetblue3\", las=1, ylab=\"f(x)\")  curve(dWALD(x, mu=1, sigma=2),       add=TRUE, col= \"purple\")  curve(dWALD(x, mu=2, sigma=4),       add=TRUE, col=\"goldenrod\")  legend(\"topright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\"),         lty=1, bty=\"n\",        legend=c(\"mu=1, sigma=1\",                 \"mu=1, sigma=2\",                 \"mu=2, sigma=4\"))   # Example 2 # Checking if the cumulative curves converge to 1 curve(pWALD(x, mu=1, sigma=1), ylim=c(0, 1),       from=0, to=5, col=\"cadetblue3\", las=1, ylab=\"F(x)\")  curve(pWALD(x, mu=1, sigma=2),       add=TRUE, col= \"purple\")  curve(pWALD(x, mu=2, sigma=4),       add=TRUE, col=\"goldenrod\")  legend(\"bottomright\", col=c(\"cadetblue3\", \"purple\", \"goldenrod\"),         lty=1, bty=\"n\",        legend=c(\"mu=1, sigma=1\",                 \"mu=1, sigma=2\",                 \"mu=2, sigma=4\"))   # Example 3 # Checking the quantile function mu <- 1 sigma <- 2 p <- seq(from=0, to=0.999, length.out=100) plot(x=qWALD(p, mu=mu, sigma=sigma), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pWALD(x, mu=mu, sigma=sigma), from=0, add=TRUE, col=\"red\")   # Example 4 # Comparing the random generator output with # the theoretical probabilities mu <- 1 sigma <- 20 x <- rWALD(n=10000, mu=mu, sigma=sigma) hist(x, freq=FALSE) curve(dWALD(x, mu=mu, sigma=sigma), col=\"tomato\", add=TRUE)"},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weibull Geometric distribution — dWG","title":"The Weibull Geometric distribution — dWG","text":"Density, distribution function, quantile function, random generation hazard function weibull geometric distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weibull Geometric distribution — dWG","text":"","code":"dWG(x, mu, sigma, nu, log = FALSE)  pWG(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qWG(p, sigma, mu, nu, lower.tail = TRUE, log.p = FALSE)  rWG(n, mu, sigma, nu)  hWG(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weibull Geometric distribution — dWG","text":"x, q vector quantiles. mu scale parameter. sigma shape parameter. nu parameter geometric random variable. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weibull Geometric distribution — dWG","text":"dWG gives density, pWG gives distribution function, qWG gives quantile function, rWG generates random deviates hWG gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weibull Geometric distribution — dWG","text":"Weibull geometric distribution parameters mu, sigma nu density given \\(f(x) = (\\sigma \\mu^\\sigma (1-\\nu) x^(\\sigma - 1) \\exp(-(\\mu x)^\\sigma)) (1- \\nu \\exp(-(\\mu x)^\\sigma))^{-2},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(0 < \\nu < 1\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weibull Geometric distribution — dWG","text":"Barreto-Souza, W., de Morais, . L., & Cordeiro, G. M. (2011). Weibull-geometric distribution. Journal Statistical Computation Simulation, 81(5), 645-657.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weibull Geometric distribution — dWG","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weibull Geometric distribution — dWG","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dWG(x, mu = 0.9, sigma = 2, nu = 0.5), from = 0, to = 3,  ylim = c(0, 1.1), col = \"red\", las = 1, ylab = \"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pWG(x, mu = 0.9, sigma = 2, nu = 0.5), from = 0, to = 3,  ylim = c(0, 1), col = \"red\", las = 1, ylab = \"F(x)\") curve(pWG(x, mu = 0.9, sigma = 2, nu = 0.5, lower.tail = FALSE),  from = 0, to = 3, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"R(x)\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qWG(p = p, mu = 0.9, sigma = 2, nu = 0.5), y = p,  xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pWG(x,mu = 0.9, sigma = 2, nu = 0.5), from = 0, add = TRUE,  col = \"red\")  ## The random function hist(rWG(1000, mu = 0.9, sigma = 2, nu = 0.5), freq = FALSE, xlab = \"x\",  ylim = c(0, 1.8), las = 1, main = \"\") curve(dWG(x, mu = 0.9, sigma = 2, nu = 0.5),  from = 0, add = TRUE,  col = \"red\", ylim = c(0, 1.8))   ## The Hazard function( par(mfrow=c(1,1)) curve(hWG(x, mu = 0.9, sigma = 2, nu = 0.5), from = 0, to = 8,  ylim = c(0, 12), col = \"red\", ylab = \"Hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"Density, distribution function, quantile function, random generation hazard function Weighted Generalized Exponential-Exponential distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"","code":"dWGEE(x, mu, sigma, nu, log = FALSE)  pWGEE(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qWGEE(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rWGEE(n, mu, sigma, nu)  hWGEE(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"dWGEE gives density, pWGEE gives distribution function, qWGEE gives quantile function, rWGEE generates random deviates hWGEE gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"Weighted Generalized Exponential-Exponential Distribution parameters mu, sigma nu density given \\(f(x)= \\sigma \\nu \\exp(-\\nu x) (1 - \\exp(-\\nu x))^{\\sigma - 1} (1 - \\exp(-\\mu \\nu x)) / 1 - \\sigma B(\\mu + 1, \\sigma),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"Mahdavi, . (2015). Two weighted distributions generated exponential distribution. Journal Mathematical Extension, 9, 1-12.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWGEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weighted Generalized Exponential-Exponential distribution — dWGEE","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function  curve(dWGEE(x, mu = 5, sigma = 0.5, nu = 1), from = 0, to = 6,  ylim = c(0, 1), col = \"red\", las = 1, ylab = \"The probability density function\")   ## The cumulative distribution and the Reliability function par(mfrow = c(1, 2)) curve(pWGEE(x, mu = 5, sigma = 0.5, nu = 1), from = 0, to = 6,  ylim = c(0, 1), col = \"red\", las = 1, ylab = \"The cumulative distribution function\") curve(pWGEE(x, mu = 5, sigma = 0.5, nu = 1, lower.tail = FALSE),  from = 0, to = 6, ylim = c(0, 1), col = \"red\", las = 1, ylab = \"The Reliability function\")   ## The quantile function p <- seq(from = 0, to = 0.99999, length.out = 100) plot(x = qWGEE(p = p, mu = 5, sigma = 0.5, nu = 1), y = p,  xlab = \"Quantile\", las = 1, ylab = \"Probability\") curve(pWGEE(x, mu = 5, sigma = 0.5, nu = 1), from = 0, add = TRUE,  col = \"red\")  ## The random function hist(rWGEE(1000, mu = 5, sigma = 0.5, nu = 1), freq = FALSE, xlab = \"x\",  ylim = c(0, 1), las = 1, main = \"\") curve(dWGEE(x, mu = 5, sigma = 0.5, nu = 1),  from = 0, add = TRUE,  col = \"red\", ylim = c(0, 1))   ## The Hazard function( par(mfrow=c(1,1)) curve(hWGEE(x, mu = 5, sigma = 0.5, nu = 1), from = 0, to = 6,  ylim = c(0, 1.4), col = \"red\", ylab = \"The hazard function\", las = 1)   par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weibull Poisson distribution — dWP","title":"The Weibull Poisson distribution — dWP","text":"Density, distribution function, quantile function, random generation hazard function Weibull Poisson distribution parameters mu, sigma nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weibull Poisson distribution — dWP","text":"","code":"dWP(x, mu, sigma, nu, log = FALSE)  pWP(q, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  qWP(p, mu, sigma, nu, lower.tail = TRUE, log.p = FALSE)  rWP(n, mu, sigma, nu)  hWP(x, mu, sigma, nu)"},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weibull Poisson distribution — dWP","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weibull Poisson distribution — dWP","text":"dWP gives density, pWP gives distribution function, qWP gives quantile function, rWP generates random deviates hWP gives hazard function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weibull Poisson distribution — dWP","text":"Weibull Poisson distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu e^{-\\nu}} {1-e^{-\\nu}} x^{\\mu-1} \\exp({-\\sigma x^{\\mu}+\\nu \\exp({-\\sigma} x^{\\mu}) }),\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weibull Poisson distribution — dWP","text":"Lu, Wanbo, Daimin Shi. \"new compounding life distribution: Weibull–Poisson distribution.\" Journal applied statistics 39.1 (2012): 21-38.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weibull Poisson distribution — dWP","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/dWP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weibull Poisson distribution — dWP","text":"","code":"old_par <- par(mfrow = c(1, 1)) # save previous graphical parameters  ## The probability density function curve(dWP(x, mu=1.5, sigma=0.5, nu=10), from=0.0001, to=2,       col=\"red\", las=1, ylab=\"f(x)\")   ## The cumulative distribution and the Reliability function par(mfrow=c(1, 2)) curve(pWP(x, mu=1.5, sigma=0.5, nu=10),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"F(x)\") curve(pWP(x, mu=1.5, sigma=0.5, nu=10, lower.tail=FALSE),       from=0.0001, to=2, col=\"red\", las=1, ylab=\"R(x)\")   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qWP(p, mu=1.5, sigma=0.5, nu=10), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pWP(x, mu=1.5, sigma=0.5, nu=10),       from=0, add=TRUE, col=\"red\")  ## The random function hist(rWP(n=10000, mu=1.5, sigma=0.5, nu=10), freq=FALSE,      xlab=\"x\", ylim=c(0, 2.2), las=1, main=\"\") curve(dWP(x, mu=1.5, sigma=0.5, nu=10),       from=0.001, to=4, add=TRUE, col=\"red\")   ## The Hazard function curve(hWP(x, mu=1.5, sigma=0.5, nu=10), from=0.001, to=5,       col=\"red\", ylab=\"Hazard function\", las=1)  par(old_par) # restore previous graphical parameters"},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Exponential Geometric family — EEG","title":"The Extended Exponential Geometric family — EEG","text":"Extended Exponential Geometric family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Exponential Geometric family — EEG","text":"","code":"EEG(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Exponential Geometric family — EEG","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Exponential Geometric family — EEG","text":"Returns gamlss.family object can used fit EEG distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Exponential Geometric family — EEG","text":"Extended Exponential Geometric distribution parameters mu sigma density given \\(f(x)= \\mu \\sigma \\exp(-\\mu x)(1 - (1 - \\sigma)\\exp(-\\mu x))^{-2},\\) \\(x > 0\\), \\(\\mu > 0\\) \\(\\sigma > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Exponential Geometric family — EEG","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Adamidis, K., Dimitrakopoulou, T., & Loukas, S. (2005). extension exponential-geometric distribution. Statistics & probability letters, 73(3), 259-269.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Exponential Geometric family — EEG","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Exponential Geometric family — EEG","text":"","code":"# Generating some random values with # known mu, sigma, nu and tau y <- rEEG(n=100, mu = 1, sigma =1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, family=EEG,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>   0.6768797  exp(coef(mod, what='sigma')) #> (Intercept)  #>     1.24602   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.1, max=0.2) x2 <- runif(n, min=0.1, max=0.15) mu <- exp(0.75 - x1) sigma <- exp(0.5 - x2) x <- rEEG(n=n, mu, sigma)  mod <- gamlss(x~x1, sigma.fo=~x2, family=EEG,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   0.9298249  -3.0037584  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   0.5115125  -0.8173103"},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":null,"dir":"Reference","previous_headings":"","what":"The four parameter Exponentiated Generalized Gamma family — EGG","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"four parameter Exponentiated Generalized Gamma distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"","code":"EGG(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"Returns gamlss.family object can used fit EGG distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"Four parameter Exponentiated Generalized Gamma distribution parameters mu, sigma, nu tau density given \\(f(x) = \\frac{\\nu \\sigma}{\\mu \\Gamma(\\tau)} \\left(\\frac{x}{\\mu}\\right)^{\\sigma \\tau -1} \\exp\\left\\{ - \\left( \\frac{x}{\\mu} \\right)^\\sigma \\right\\} \\left\\{ \\gamma_1\\left( \\tau, \\left( \\frac{x}{\\mu} \\right)^\\sigma \\right) \\right\\}^{\\nu-1} ,\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Cordeiro, G. M., Ortega, E. M., & Silva, G. O. (2011). exponentiated generalized gamma distribution application lifetime data. Journal statistical computation simulation, 81(7), 827-842.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EGG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The four parameter Exponentiated Generalized Gamma family — EGG","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau # \\donttest{ set.seed(123456) y <- rEGG(n=100, mu=0.1, sigma=0.8, nu=10, tau=1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1,                family=EGG,               control=gamlss.control(n.cyc=500, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what=\"mu\")) #> (Intercept)  #>   0.3046327  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>    1.154273  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    10.99878  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>   0.4935583  # }  # Example 2 # Generating random values under some model  # \\donttest{ # A function to simulate a data set with Y ~ EGG gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu    <- exp(-0.8 + -3 * x1)   sigma <- exp(0.77 - 2 * x2)   nu    <- 10   tau   <- 1.5   y <- rEGG(n=n, mu=mu, sigma=sigma, nu=nu, tau)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(12345) dat <- gendat(n=200)  mod <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~1,                family=EGG, data=dat,               control=gamlss.control(n.cyc=500, trace=FALSE)) #> Warning: Algorithm RS has not yet converged  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  -0.7148452  -2.9857824  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    0.942474   -2.101227  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    6.535813  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>    1.970906  # }"},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":null,"dir":"Reference","previous_headings":"","what":"The Exponentiated Modifien Weibull Extension family — EMWEx","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"Exponentiated Modifien Weibull Extension family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"","code":"EMWEx(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"Returns gamlss.family object can used fit EMWEx distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"Beta-Weibull distribution parameters mu, sigma, nu tau density given \\(f(x)= \\nu \\sigma \\tau (\\frac{x}{\\mu})^{\\sigma-1} \\exp((\\frac{x}{\\mu})^\\sigma + \\nu \\mu (1- \\exp((\\frac{x}{\\mu})^\\sigma))) (1 - \\exp (\\nu\\mu (1- \\exp((\\frac{x}{\\mu})^\\sigma))))^{\\tau-1} ,\\) \\(x > 0\\), \\(\\nu> 0\\), \\(\\mu > 0\\), \\(\\sigma> 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Sarhan, . M., & Apaloo, J. (2013). Exponentiated modified Weibull extension distribution. Reliability Engineering & System Safety, 112, 137-144.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EMWEx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Exponentiated Modifien Weibull Extension family — EMWEx","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau y <- rEMWEx(n=100, mu = 1, sigma =1.21, nu=1, tau=2)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family=EMWEx,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    1.348076  exp(coef(mod, what='sigma')) #> (Intercept)  #>    2.129508  exp(coef(mod, what='nu')) #> (Intercept)  #>   0.9224002  exp(coef(mod, what='tau')) #> (Intercept)  #>   0.9393789   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(0.75 - x1) sigma <- exp(0.5 - x2) nu <- 1 tau <- 2 x <- rEMWEx(n=n, mu, sigma, nu, tau)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~1, family=EMWEx,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   0.5439596  -1.1981174  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.106044   -2.323641  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.8843647  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>    2.327184"},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"Extended Odd Frechet-Nadarjad-Hanhighi family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"","code":"EOFNH(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"Returns gamlss.family object can used fit EOFNH distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"Extended Odd Frechet-Nadarajah-Haghighi distribution parameters mu, sigma, nu tau density given \\(f(x)= \\frac{\\mu\\sigma\\nu\\tau(1+\\nu x)^{\\sigma-1}e^{(1-(1+\\nu x)^\\sigma)}[1-(1-e^{(1-(1+\\nu x)^\\sigma)})^{\\mu}]^{\\tau-1}}{(1-e^{(1-(1+\\nu x)^{\\sigma})})^{\\mu\\tau+1}} e^{-[(1-e^{(1-(1+\\nu x)^\\sigma)})^{-\\mu}-1]^{\\tau}},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\), \\(\\nu > 0\\) \\(\\tau > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"Nasiru, S. (2018). Extended Odd Fréchet‐G Family Distributions Journal Probability Statistics, 2018(1), 2931326.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"Helber Santiago Padilla, hspadillar@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EOFNH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Odd Frechet-Nadarajah-Haghighi family — EOFNH","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau set.seed(123) y <- rEOFNH(n=100, mu=1, sigma=2.1, nu=0.8, tau=1)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family=EOFNH,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what=\"mu\")) #> (Intercept)  #>   0.9036802  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>     2.55407  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.5872532  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>    1.075305   # Example 2 # Generating random values under the model n <- 100 x1 <- runif(n) x2 <- runif(n) mu <- exp(0.5 - 1.2 * x1) sigma <- 2.1 nu <- 0.8 tau <- 1 y <- rEOFNH(n=n, mu, sigma, nu, tau)  mod <- gamlss(y~x1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family=EOFNH,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  0.05375426 -0.99943981  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>    1.330352  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.9497364  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>    1.382512"},{"path":"http://ousuga.github.io/RelDists/reference/equipment.html","id":null,"dir":"Reference","previous_headings":"","what":"Electronic equipment data — equipment","title":"Electronic equipment data — equipment","text":"Time failure hours 18 units electronic device.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/equipment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electronic equipment data — equipment","text":"","code":"data(equipment)"},{"path":"http://ousuga.github.io/RelDists/reference/equipment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Electronic equipment data — equipment","text":"vector 18 observations.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/equipment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Electronic equipment data — equipment","text":"","code":"data(equipment) hist(equipment, main=\"\", xlab=\"Time (h)\")"},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_CJ2.html","id":null,"dir":"Reference","previous_headings":"","what":"initValuesCJ2 — estim_mu_sigma_CJ2","title":"initValuesCJ2 — estim_mu_sigma_CJ2","text":"function generates initial values CJ2 distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_CJ2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initValuesCJ2 — estim_mu_sigma_CJ2","text":"","code":"estim_mu_sigma_CJ2(y)"},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_CJ2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initValuesCJ2 — estim_mu_sigma_CJ2","text":"y vector random sample","code":""},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_CJ2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initValuesCJ2 — estim_mu_sigma_CJ2","text":"two-length numeric vector initial estimates \\(mu\\) \\(sigma\\) parameters CJ2 distribution (see dCJ2).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_NEE.html","id":null,"dir":"Reference","previous_headings":"","what":"estim_mu_sigma_NEE — estim_mu_sigma_NEE","title":"estim_mu_sigma_NEE — estim_mu_sigma_NEE","text":"function generates initial values NEE distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_NEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estim_mu_sigma_NEE — estim_mu_sigma_NEE","text":"","code":"estim_mu_sigma_NEE(y)"},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_NEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estim_mu_sigma_NEE — estim_mu_sigma_NEE","text":"y vector random sample","code":""},{"path":"http://ousuga.github.io/RelDists/reference/estim_mu_sigma_NEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"estim_mu_sigma_NEE — estim_mu_sigma_NEE","text":"","code":"y <- rNEE(n=100, mu=4.6, sigma=0.35) estim_mu_sigma_NEE(y=y) #>    mu_hat sigma_hat  #> 4.4599859 0.3355683"},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Exponentiated Weibull family — EW","title":"The Exponentiated Weibull family — EW","text":"Exponentiated Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Exponentiated Weibull family — EW","text":"","code":"EW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Exponentiated Weibull family — EW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Exponentiated Weibull family — EW","text":"Returns gamlss.family object can used fit EW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Exponentiated Weibull family — EW","text":"Exponentiated Weibull Distribution parameters mu, sigma nu density given \\(f(x)=\\nu \\mu \\sigma x^{\\sigma-1} \\exp(-\\mu x^\\sigma) (1-\\exp(-\\mu x^\\sigma))^{\\nu-1},\\) x > 0.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Exponentiated Weibull family — EW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu # Will not be run this example because high number is cycles # is needed in order to get good estimates if (FALSE) { # \\dontrun{ y <- rEW(n=100, mu=2, sigma=1.5, nu=0.5)  # Fitting the model require(gamlss) mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='EW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) exp(coef(mod, what='sigma')) exp(coef(mod, what='nu')) } # }  # Example 2 # Generating random values under some model # Will not be run this example because high number is cycles # is needed in order to get good estimates if (FALSE) { # \\dontrun{ n <- 200 x1 <- rpois(n, lambda=2) x2 <- runif(n) mu <- exp(2 + -3 * x1) sigma <- exp(3 - 2 * x2) nu <- 2 x <- rEW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=EW,                control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") coef(mod, what=\"sigma\") exp(coef(mod, what=\"nu\")) } # }"},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":null,"dir":"Reference","previous_headings":"","what":"The exponentiated XLindley family — EXL","title":"The exponentiated XLindley family — EXL","text":"function EXL() defines exponentiated XLindley, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The exponentiated XLindley family — EXL","text":"","code":"EXL(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The exponentiated XLindley family — EXL","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The exponentiated XLindley family — EXL","text":"Returns gamlss.family object can used fit EXL distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The exponentiated XLindley family — EXL","text":"exponentiated XLindley parameters mu sigma density given $$f(x) = \\frac{\\sigma\\mu^2(2+\\mu + x)\\exp(-\\mu x)}{(1+\\mu)^2}\\left[1-  \\left(1+\\frac{\\mu x}{(1 + \\mu)^2}\\right) \\exp(-\\mu x)\\right] ^ {\\sigma-1} $$ \\(x \\geq 0\\), \\(\\mu \\geq 0\\) \\(\\sigma \\geq 0\\). Note: implementation changed original parameters \\(\\delta\\) \\(\\mu\\) \\(\\alpha\\) \\(\\sigma\\) implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The exponentiated XLindley family — EXL","text":"Alomair, . M., Ahmed, M., Tariq, S., Ahsan-ul-Haq, M., & Talib, J. (2024). exponentiated XLindley distribution properties, inference applications. Heliyon, 10(3).","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The exponentiated XLindley family — EXL","text":"Manuel Gutierrez Tangarife, mgutierrezta@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/EXL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The exponentiated XLindley family — EXL","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rEXL(n=300, mu=0.75, sigma=1.3)  # Fitting the model require(gamlss) mod1 <- gamlss(y~1, sigma.fo=~1, family=EXL,                control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>   0.7396678  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    1.254606    # Example 2 # Generating random values for a regression model  # A function to simulate a data set with Y ~ EXL gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(1.45 - 3 * x1)   sigma <- exp(2 - 1.5 * x2)   y <- rEXL(n=n, mu=mu, sigma=sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(1234) dat <- gendat(n=100)  mod2 <- gamlss(y~x1, sigma.fo=~x2,                 family=EXL, data=dat,                control=gamlss.control(n.cyc=5000, trace=FALSE))  summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"EXL\", \"Exponentiated XLindley\")  #>  #> Call:   #> gamlss(formula = y ~ x1, sigma.formula = ~x2, family = EXL, data = dat,   #>     control = gamlss.control(n.cyc = 5000, trace = FALSE))  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.68780    0.09469   17.82   <2e-16 *** #> x1          -3.27523    0.18328  -17.87   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   2.3398     0.1808  12.939  < 2e-16 *** #> x2           -1.6885     0.2583  -6.537 2.85e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  100  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  96  #>                       at cycle:  18  #>   #> Global Deviance:     262.9851  #>             AIC:     270.9851  #>             SBC:     281.4058  #> ******************************************************************  # Example 3 # Mortality rate due to COVID-19 for 30 days (31st March to April 30, 2020) # recorded for the Netherlands. # Taken from Alomair et al. (2024) page 12.  x <- c(14.918, 10.656, 12.274, 10.289, 10.832, 7.099, 5.928, 13.211,         7.968, 7.584, 5.555, 6.027, 4.097, 3.611, 4.960, 7.498, 6.940,         5.307, 5.048, 2.857, 2.254, 5.431, 4.462, 3.883,        3.461, 3.647, 1.974, 1.273, 1.416, 4.235)  mod3 <- gamlss(x~1, sigma.fo=~1, family=EXL,                control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod3, what=\"mu\")) #> (Intercept)  #>   0.4089915  exp(coef(mod3, what=\"sigma\")) #> (Intercept)  #>    2.710467   # Replicating figure 4 from Alomair et al. (2024) # Hist and estimated pdf hist(x, freq=FALSE) curve(dEXL(x, mu=0.4089915, sigma=2.710467), add=TRUE,        col=\"tomato\", lwd=2)  # Empirical cdf and estimated ecdf plot(ecdf(x)) curve(pEXL(x, mu=0.4089915, sigma=2.710467), add=TRUE,        col=\"tomato\", lwd=2)  # QQplot qqplot(x, rEXL(n=30, mu=0.4089915, sigma=2.710467),         col=\"tomato\") qqline(x, distribution=function(p) qEXL(p, mu=0.4089915, sigma=2.710467))    # Example 4 # Precipitation in inches # Taken from Alomair et al. (2024) page 13.  # Manuel"},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Extended Weibull family — ExW","title":"The Extended Weibull family — ExW","text":"Extended Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Extended Weibull family — ExW","text":"","code":"ExW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Extended Weibull family — ExW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Extended Weibull family — ExW","text":"Returns gamlss.family object can used fit ExW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Extended Weibull family — ExW","text":"Extended Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu x^{\\sigma -1} exp({-\\mu x^{\\sigma}})} {[1 -(1-\\nu) exp({-\\mu x^{\\sigma}})]^2},\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Extended Weibull family — ExW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Zhang, T., & Xie, M. (2007). Failure data analysis extended Weibull distribution. Communications Statistics—Simulation Computation, 36(3), 579-592.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Extended Weibull family — ExW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Extended Weibull family — ExW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rExW(n=200, mu=0.3, sigma=2, nu=0.05)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='ExW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    2.381852  exp(coef(mod, what='sigma')) #> (Intercept)  #>    1.059354  exp(coef(mod, what='nu')) #> (Intercept)  #>    1.961767   # Example 2 # Generating random values under some model n <- 500 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(-2 + 3 * x1) sigma <- exp(1.3 - 2 * x2) nu <- 0.05 x <- rExW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=ExW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   0.6995812   1.5505809  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    0.664554   -1.880514  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.949216"},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Ex-Wald family — ExWALD","title":"The Ex-Wald family — ExWALD","text":"function ExWALD() defines Ex-wALD distribution, three-parameter continuous distribution gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Ex-Wald family — ExWALD","text":"","code":"ExWALD(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Ex-Wald family — ExWALD","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma parameter. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Ex-Wald family — ExWALD","text":"Returns gamlss.family object can used fit Ex-WALD distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Ex-Wald family — ExWALD","text":"Ex-Wald distribution parameters \\(\\mu\\), \\(\\sigma\\) \\(\\nu\\) density given \\(f(x |\\mu, \\sigma, \\nu) = \\frac{1}{\\nu} \\exp(\\frac{-x}{\\nu} + \\sigma(\\mu-k)) F_W(x|k, \\sigma) \\, \\text{} \\, k \\geq 0\\) \\(f(x |\\mu, \\sigma, \\nu) = \\frac{1}{\\nu} \\exp\\left( \\frac{-(\\sigma-\\mu)^2}{2x} \\right) Re \\left( w(k^\\prime \\sqrt{x/2} + \\frac{\\sigma }{\\sqrt{2x}}) \\right)  \\, \\text{} \\, k < 0\\) \\(k=\\sqrt{\\mu^2-\\frac{2}{\\nu}}\\), \\(k^\\prime=\\sqrt{\\frac{2}{\\nu}-\\mu^2}\\) \\(F_W\\) corresponds cumulative function Wald distribution. details expressions can found page 680 Heathcote (2004).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Ex-Wald family — ExWALD","text":"Schwarz, W. (2001). ex-Wald distribution descriptive model response times. Behavior Research Methods, Instruments, & Computers, 33, 457-469. Heathcote, . (2004). Fitting Wald ex-Wald distributions response time data: example using functions S-PLUS package. Behavior Research Methods, Instruments, & Computers, 36, 678-694.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Ex-Wald family — ExWALD","text":"Freddy Hernandez, fhernanb@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/ExWALD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Ex-Wald family — ExWALD","text":"","code":"# Example 1 # Generating random values with # known mu, sigma and nu  mu <- 0.20 sigma <- 70 nu <- 115  set.seed(123) y <- rExWALD(n=100, mu, sigma, nu)  library(gamlss) mod1 <- gamlss(y~1, family=ExWALD,                control=gamlss.control(n.cyc=1000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 1258.666   exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>   0.2392296  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>     74.6907  exp(coef(mod1, what=\"nu\")) #> (Intercept)  #>     129.982   # Example 2 # Generating random values under some model  # \\donttest{ # A function to simulate a data set with Y ~ ExWALD gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu    <- exp(-1 + 2.8 * x1) # 1.5 approximately   sigma <- exp( 1 - 1.2 * x2) # 1.5 approximately   nu    <- 2   y <- rExWALD(n=n, mu=mu, sigma=sigma, nu=nu)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(1234) dat <- gendat(n=200)  # Fitting the model mod2 <- gamlss(y ~ x1,                sigma.fo = ~ x2,                nu.fo = ~ 1,                family = ExWALD,                data = dat,                control = gamlss.control(n.cyc=1000,                                          trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 822.0462  #> GAMLSS-RS iteration 2: Global Deviance = 819.875  #> GAMLSS-RS iteration 3: Global Deviance = 818.6914  #> GAMLSS-RS iteration 4: Global Deviance = 817.9948  #> GAMLSS-RS iteration 5: Global Deviance = 817.6103  #> GAMLSS-RS iteration 6: Global Deviance = 817.4151  #> GAMLSS-RS iteration 7: Global Deviance = 817.3221  #> GAMLSS-RS iteration 8: Global Deviance = 817.28  #> GAMLSS-RS iteration 9: Global Deviance = 817.2608  #> GAMLSS-RS iteration 10: Global Deviance = 817.2515  #> GAMLSS-RS iteration 11: Global Deviance = 817.2476  #> GAMLSS-RS iteration 12: Global Deviance = 817.246  #> GAMLSS-RS iteration 13: Global Deviance = 817.2453  summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"ExWALD\", \"Ex-Wald\")  #>  #> Call:  gamlss(formula = y ~ x1, sigma.formula = ~x2, nu.formula = ~1,   #>     family = ExWALD, data = dat, control = gamlss.control(n.cyc = 1000,   #>         trace = TRUE))  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -0.9079     0.1767  -5.139 6.59e-07 *** #> x1            2.2407     0.3472   6.453 8.25e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.8353     0.1504   5.553 8.95e-08 *** #> x2           -0.6647     0.2863  -2.322   0.0212 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Nu link function:  log  #> Nu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.63266    0.09008   7.023 3.36e-11 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  200  #> Degrees of Freedom for the fit:  5 #>       Residual Deg. of Freedom:  195  #>                       at cycle:  13  #>   #> Global Deviance:     817.2453  #>             AIC:     827.2453  #>             SBC:     843.7368  #> ****************************************************************** # }"},{"path":"http://ousuga.github.io/RelDists/reference/exwstpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar function for the Ex-Wald distribution — exwstpt","title":"Auxiliar function for the Ex-Wald distribution — exwstpt","text":"function generates start values.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/exwstpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar function for the Ex-Wald distribution — exwstpt","text":"","code":"exwstpt(x, p = 0.5)"},{"path":"http://ousuga.github.io/RelDists/reference/exwstpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar function for the Ex-Wald distribution — exwstpt","text":"x value x. p value p.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/exwstpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliar function for the Ex-Wald distribution — exwstpt","text":"returns vector starting values.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/fitexw.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar function for the Ex-Wald distribution — fitexw","title":"Auxiliar function for the Ex-Wald distribution — fitexw","text":"function generates starting values.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/fitexw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar function for the Ex-Wald distribution — fitexw","text":"","code":"fitexw(rt, p = 0.5, start = exwstpt(rt, p), scaleit = TRUE)"},{"path":"http://ousuga.github.io/RelDists/reference/fitexw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar function for the Ex-Wald distribution — fitexw","text":"rt vector random sample. p value p. start optional start vector. scaleit logical value scale.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/fitexw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliar function for the Ex-Wald distribution — fitexw","text":"returns vector cumulative probabilities.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Flexible Weibull Extension family — FWE","title":"The Flexible Weibull Extension family — FWE","text":"function FWE() defines Flexible Weibull distribution, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Flexible Weibull Extension family — FWE","text":"","code":"FWE(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Flexible Weibull Extension family — FWE","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Flexible Weibull Extension family — FWE","text":"Returns gamlss.family object can used fit FWE distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Flexible Weibull Extension family — FWE","text":"Flexible Weibull extension parameters mu sigma density given \\(f(x) = (\\mu + \\sigma/x^2) exp(\\mu x - \\sigma/x) exp(-exp(\\mu x-\\sigma/x))\\) x>0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/FWE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Flexible Weibull Extension family — FWE","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rFWE(n=100, mu=0.75, sigma=1.3)  # Fitting the model require(gamlss) mod <- gamlss(y~1, sigma.fo=~1, family='FWE',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>   0.8245723  exp(coef(mod, what='sigma')) #> (Intercept)  #>    1.314171   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n) x2 <- runif(n) mu <- exp(1.21 - 3 * x1) sigma <- exp(1.26 - 2 * x2) x <- rFWE(n=n, mu, sigma)  mod <- gamlss(x~x1, sigma.fo=~x2, family=FWE,                control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.239831   -2.920040  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.392937   -2.012539"},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Gamma Weibull family — GammaW","title":"The Gamma Weibull family — GammaW","text":"Gamma Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Gamma Weibull family — GammaW","text":"","code":"GammaW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Gamma Weibull family — GammaW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Gamma Weibull family — GammaW","text":"Returns gamlss.family object can used fit GammaW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Gamma Weibull family — GammaW","text":"Gamma Weibull distribution parameters mu, sigma nu density given \\(f(x)= \\frac{\\sigma \\mu^{\\nu}}{\\Gamma (\\nu)} x^{\\nu \\sigma - 1} \\exp(-\\mu x^\\sigma),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Gamma Weibull family — GammaW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Stacy, E. W. (1962). generalization gamma distribution. Annals mathematical statistics, 1187-1192.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Gamma Weibull family — GammaW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GammaW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Gamma Weibull family — GammaW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rGammaW(n=100, mu = 0.5, sigma = 2, nu=1)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='GammaW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    0.100022  exp(coef(mod, what='sigma')) #> (Intercept)  #>    3.115235  exp(coef(mod, what='nu')) #> (Intercept)  #>   0.7441492   # Example 2 # Generating random values under some model n     <- 200 x1    <- runif(n) x2    <- runif(n) mu    <- exp(-1.6 * x1) sigma <- exp(1.1 - 1 * x2) nu    <- 1 x     <- rGammaW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, mu.fo=~x1, sigma.fo=~x2, nu.fo=~1, family=GammaW,               control=gamlss.control(n.cyc=50000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   -1.788268   -4.304602  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   1.9481914  -0.9822844  coef(mod, what='nu') #> (Intercept)  #>  -0.6609366"},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Gompertz family — GGD","title":"The Generalized Gompertz family — GGD","text":"Generalized Gompertz  family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Gompertz family — GGD","text":"","code":"GGD(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Gompertz family — GGD","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Gompertz family — GGD","text":"Returns gamlss.family object can used fit GGD distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Gompertz family — GGD","text":"Generalized Gompertz  Distribution parameters mu, sigma nu density given \\(f(x)= \\nu \\mu \\exp(-\\frac{\\mu}{\\sigma}(\\exp(\\sigma x - 1))) (1 - \\exp(-\\frac{\\mu}{\\sigma}(\\exp(\\sigma x - 1))))^{(\\nu - 1)} ,\\) \\(x \\geq 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu > 0\\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalized Gompertz family — GGD","text":"#' El-Gohary, ., Alshamrani, ., & Al-Otaibi, . N. (2013). generalized Gompertz distribution. Applied mathematical modelling, 37(1-2), 13-24.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Generalized Gompertz family — GGD","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GGD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Gompertz family — GGD","text":"","code":"#Example 1 # Generating some random values with # known mu, sigma, nu and tau y <- rGGD(n=1000, mu=1, sigma=0.3, nu=1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='GGD',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu  # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>   0.9749114  exp(coef(mod, what='sigma')) #> (Intercept)  #>   0.3144968  exp(coef(mod, what='nu')) #> (Intercept)  #>    1.452729   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(0.5 - x1) sigma <- exp(-1 - x2) nu <- 1.5 x <- rGGD(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=GGD,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.460665   -2.735945  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   -6.274569    9.130668  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.741431"},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Inverse Weibull family — GIW","title":"The Generalized Inverse Weibull family — GIW","text":"Generalized Inverse Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Inverse Weibull family — GIW","text":"","code":"GIW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Inverse Weibull family — GIW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Inverse Weibull family — GIW","text":"Returns gamlss.family object can used fit GIW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Inverse Weibull family — GIW","text":"Generalized Inverse Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\nu \\sigma \\mu^{\\sigma} x^{-(\\sigma + 1)} exp \\{-\\nu (\\frac{\\mu}{x})^{\\sigma}\\},\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Generalized Inverse Weibull family — GIW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. De Gusmao, F. R., Ortega, E. M., & Cordeiro, G. M. (2011). generalized inverse Weibull distribution. Statistical Papers, 52, 591-619.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Generalized Inverse Weibull family — GIW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Inverse Weibull family — GIW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rGIW(n=200, mu=3, sigma=5, nu=0.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='GIW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    2.803079  exp(coef(mod, what='sigma')) #> (Intercept)  #>    4.899457  exp(coef(mod, what='nu')) #> (Intercept)  #>   0.6562406   # Example 2 # Generating random values under some model n <- 500 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(-1.02 + 3 * x1) sigma <- exp(1.69 - 2 * x2) nu <- 0.5 x <- rGIW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=GIW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  -0.8935271   2.3897205  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.828751   -2.260452  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    0.748454"},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalized Modified Weibull family — GMW","title":"The Generalized Modified Weibull family — GMW","text":"Generalized modified Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalized Modified Weibull family — GMW","text":"","code":"GMW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"sqrt\", tau.link = \"sqrt\")"},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalized Modified Weibull family — GMW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"sqrt\" link default nu parameter. tau.link defines tau.link, \"sqrt\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalized Modified Weibull family — GMW","text":"Returns gamlss.family object can used fit GMW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalized Modified Weibull family — GMW","text":"Generalized modified Weibull distribution parameters mu, sigma, nu tau density given \\(f(x)= \\mu \\sigma x^{\\nu - 1}(\\nu + \\tau x) \\exp(\\tau x - \\mu x^{\\nu} e^{\\tau x}) [1 - \\exp(- \\mu x^{\\nu} e^{\\tau x})]^{\\sigma-1},\\) x > 0.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/GMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalized Modified Weibull family — GMW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau y <- rGMW(n=100, mu=2, sigma=0.5, nu=2, tau=1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~ 1, family='GMW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    10.63227  exp(coef(mod, what='sigma')) #> (Intercept)  #>    0.160873  (coef(mod, what='nu'))^2 #> (Intercept)  #>    5.428389  (coef(mod, what='tau'))^2 #> (Intercept)  #>   0.6294218   # Example 2 # Generating random values under some model if (FALSE) { # \\dontrun{ n <- 1000 x1 <- runif(n) x2 <- runif(n) mu <- exp(2 + -3 * x1) sigma <- exp(3 - 2 * x2) nu <- 2 tau <- 1.5 x <- rGMW(n=n, mu, sigma, nu, tau)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~ 1, family=\"GMW\",                control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") coef(mod, what=\"sigma\") coef(mod, what=\"nu\")^2 coef(mod, what=\"tau\")^2 } # }"},{"path":"http://ousuga.github.io/RelDists/reference/initValuesFWE.html","id":null,"dir":"Reference","previous_headings":"","what":"initValuesFWE — initValuesFWE","title":"initValuesFWE — initValuesFWE","text":"function generates initial values FWE distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesFWE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initValuesFWE — initValuesFWE","text":"","code":"initValuesFWE(y)"},{"path":"http://ousuga.github.io/RelDists/reference/initValuesFWE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initValuesFWE — initValuesFWE","text":"y vector random sample","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesFWE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initValuesFWE — initValuesFWE","text":"two-length numeric vector initial estimates \\(mu\\) \\(sigma\\) parameters FWE distribution (see dFWE).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values and search region for Odd Weibull distribution — initValuesOW","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"function can used get suggestions initial values search region parameter estimation OW distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"","code":"initValuesOW(   formula,   data = NULL,   local_reg = loess.options(),   interpolation = interp.options(),   ... )"},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"formula object class formula response left operator ~. right side must 1. data optional data frame containing response variables. data specified, variables taken environment initValuesOW called. local_reg list control parameters LOESS. See loess.options. interpolation list control parameters interpolation function. See interp.options. ... arguments passed TTTE_Analytical.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"Returns object class c(\"initValOW\", \"HazardShape\") containing: sigma.start value \\(sigma\\) parameter OW distribution. nu.start value \\(nu\\) parameter OW distribution. sigma.valid search region \\(sigma\\) parameter OW distribution. nu.valid search region \\(nu\\) parameter OW distribution. TTTplot Total Time Test transform computed data. hazard_type shape hazard function determined TTT plot.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"function performs non-parametric estimation empirical total time test (TTT) plot. , estimated curve can used get suggestions initial values search region parameters based hazard shape associated  shape empirical TTT plot.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/initValuesOW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial values and search region for Odd Weibull distribution — initValuesOW","text":"","code":"# Example 1 # Bathtuh hazard and its corresponding TTT plot y1 <- rOW(n = 1000, mu = 0.1, sigma = 7, nu = 0.08) my_initial_guess1 <- initValuesOW(formula=y1~1) summary(my_initial_guess1) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 5 #> nu = 0.1 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu < 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Bathtub plot(my_initial_guess1, par_plot=list(mar=c(3.7,3.7,1,2.5),                                      mgp=c(2.5,1,0))) #> Warning: The `par_plot` argument of `plot.HazardShape()` is deprecated as of #> EstimationTools 4.0.0. #> ℹ Please use `plot.HazardShape()` instead.   curve(hOW(x, mu = 0.022, sigma = 8, nu = 0.01), from = 0,        to = 80, ylim = c(0, 0.04), col = \"red\",        ylab = \"Hazard function\", las = 1)   # Example 2 # Bathtuh hazard and its corresponding TTT plot with right censored data # \\donttest{ y2 <- rOW(n = 1000, mu = 0.1, sigma = 7, nu = 0.08) status <- c(rep(1, 980), rep(0, 20)) my_initial_guess2 <- initValuesOW(formula=Surv(y2, status)~1) summary(my_initial_guess2) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 5 #> nu = 0.1 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu < 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Bathtub plot(my_initial_guess2, par_plot=list(mar=c(3.7,3.7,1,2.5),                                      mgp=c(2.5,1,0)))   curve(hOW(x, mu = 0.022, sigma = 8, nu = 0.01), from = 0,        to = 80, ylim = c(0, 0.04), col = \"red\",        ylab = \"Hazard function\", las = 1)  # }"},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse Weibull family — IW","title":"The Inverse Weibull family — IW","text":"Inverse Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse Weibull family — IW","text":"","code":"IW(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse Weibull family — IW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse Weibull family — IW","text":"Returns gamlss.family object can used fit IW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Inverse Weibull family — IW","text":"Inverse Weibull distribution parameters mu, sigma density given \\(f(x) = \\mu \\sigma x^{-\\sigma-1} \\exp(\\mu x^{-\\sigma})\\) \\(x > 0\\), \\(\\mu > 0\\) \\(\\sigma > 0\\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse Weibull family — IW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Drapella, . (1993). complementary Weibull distribution: unknown just forgotten?. Quality reliability engineering international, 9(4), 383-385.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Inverse Weibull family — IW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/IW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse Weibull family — IW","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rIW(n=100, mu=5, sigma=2.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, mu.fo=~1, sigma.fo=~1, family='IW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    4.030121  exp(coef(mod, what='sigma')) #> (Intercept)  #>    2.375744   # Example 2 # Generating random values under some model n <- 200 x1 <- rpois(n, lambda=2) x2 <- runif(n) mu <- exp(2 + -1 * x1) sigma <- exp(2 - 2 * x2) x <- rIW(n=n, mu, sigma)  mod <- gamlss(x~x1, mu.fo=~1, sigma.fo=~x2, family=IW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    2.311472   -1.155356  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.974543   -1.855939"},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Kumaraswamy Inverse Weibull family — KumIW","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"Kumaraswamy Inverse Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"","code":"KumIW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"Returns gamlss.family object can used fit KumIW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"Kumaraswamy Inverse Weibull Distribution parameters mu, sigma nu density given \\(f(x)= \\mu \\sigma \\nu x^{-\\mu - 1} \\exp{- \\sigma x^{-\\mu}} (1 - \\exp{- \\sigma x^{-\\mu}})^{\\nu - 1},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Shahbaz, M. Q., Shahbaz, S., & Butt, N. S. (2012). Kumaraswamy Inverse Weibull Distribution. Pakistan journal statistics operation research, 479-489.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/KumIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Kumaraswamy Inverse Weibull family — KumIW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau y <- rKumIW(n=100, mu = 1.5, sigma=  1.5, nu = 5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family=\"KumIW\",               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu  # using the inverse link function exp(coef(mod, what=\"mu\")) #> (Intercept)  #>    1.237975  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>     1.24013  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    3.757141   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(1 - x1) sigma <- exp(1 - x2) nu <- 5 x <- rKumIW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=KumIW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  -0.2206343   0.9095627  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   0.8028841  -0.9045411  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>     3.84521"},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":null,"dir":"Reference","previous_headings":"","what":"The Lindley family — LIN","title":"The Lindley family — LIN","text":"function LIN() defines Lindley distribution one parameter gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Lindley family — LIN","text":"","code":"LIN(mu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Lindley family — LIN","text":"mu.link defines mu.link, \"log\" link default mu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Lindley family — LIN","text":"Returns gamlss.family object can used fit LIN distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Lindley family — LIN","text":"Lindley parameter mu density given \\(f(x) = \\frac{\\mu^2}{\\mu+1} (1+x) \\exp(-\\mu x),\\) x > 0 \\(\\mu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Lindley family — LIN","text":"Lindley, D. V. (1958). Fiducial distributions Bayes' theorem. Journal Royal Statistical Society. Series B (Methodological), 102-107.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Lindley family — LIN","text":"Freddy Hernandez fhernanb@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LIN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Lindley family — LIN","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rLIN(n=200, mu=2)  # Fitting the model require(gamlss) mod <- gamlss(y ~ 1, family=\"LIN\") #> GAMLSS-RS iteration 1: Global Deviance = 256.6789   # Extracting the fitted values for mu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    1.900118   # Example 2 # Generating random values under some model n <- 100 x1 <- runif(n=n) x2 <- runif(n=n) eta <- 1 + 3 * x1 - 2 * x2 mu <- exp(eta) y <- rLIN(n=n, mu=mu)  mod <- gamlss(y ~ x1 + x2, family=LIN) #> GAMLSS-RS iteration 1: Global Deviance = -64.6954  #> GAMLSS-RS iteration 2: Global Deviance = -64.6954   coef(mod, what='mu') #> (Intercept)          x1          x2  #>    1.044775    3.102479   -2.047867"},{"path":"http://ousuga.github.io/RelDists/reference/logLik_CJ2.html","id":null,"dir":"Reference","previous_headings":"","what":"logLik function for CJ2 — logLik_CJ2","title":"logLik function for CJ2 — logLik_CJ2","text":"Calculates logLik CJ2 distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/logLik_CJ2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logLik function for CJ2 — logLik_CJ2","text":"","code":"logLik_CJ2(logparam = c(0, 0), x)"},{"path":"http://ousuga.github.io/RelDists/reference/logLik_CJ2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logLik function for CJ2 — logLik_CJ2","text":"logparam vector parameters log scale. x vector response variable.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/logLik_CJ2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logLik function for CJ2 — logLik_CJ2","text":"returns loglikelihood given parameters random sample.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/logLik_NEE.html","id":null,"dir":"Reference","previous_headings":"","what":"logLik_NEE — logLik_NEE","title":"logLik_NEE — logLik_NEE","text":"auxiliar function obtain logLik NEE.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/logLik_NEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logLik_NEE — logLik_NEE","text":"","code":"logLik_NEE(param = c(0, 0), x)"},{"path":"http://ousuga.github.io/RelDists/reference/logLik_NEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logLik_NEE — logLik_NEE","text":"param vector values mu sigma x vector data","code":""},{"path":"http://ousuga.github.io/RelDists/reference/logLik_NEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logLik_NEE — logLik_NEE","text":"","code":"y <- rNEE(n=100, mu=1, sigma=1) logLik_NEE(param=c(0, 0), x=y) #> [1] -114.0988"},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Log-Weibull family — LW","title":"The Log-Weibull family — LW","text":"Log-Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Log-Weibull family — LW","text":"","code":"LW(mu.link = \"identity\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Log-Weibull family — LW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Log-Weibull family — LW","text":"Returns gamlss.family object can used fit LW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Log-Weibull family — LW","text":"Log-Weibull Distribution parameters mu sigma density given \\(f(y)=(1/\\sigma) e^{((y - \\mu)/\\sigma)} exp\\{-e^{((y - \\mu)/\\sigma)}\\},\\) \\(-\\infty < y < \\infty\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Log-Weibull family — LW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Gumbel, E. J. (1958). Statistics extremes. Columbia university press.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Log-Weibull family — LW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/LW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Log-Weibull family — LW","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma  y <- rLW(n=100, mu=0, sigma=1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, family= 'LW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function coef(mod, 'mu') #> (Intercept)  #>   0.1397453  exp(coef(mod, 'sigma')) #> (Intercept)  #>    1.289378   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- 1.5 - 3 * x1 sigma <- exp(1.4 - 2 * x2) x <- rLW(n=n, mu, sigma)  mod <- gamlss(x~x1, sigma.fo=~x2, family=LW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.495791   -3.011836  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.398265   -2.180123"},{"path":"http://ousuga.github.io/RelDists/reference/mice.html","id":null,"dir":"Reference","previous_headings":"","what":"Mice mortality data — mice","title":"Mice mortality data — mice","text":"ages death weeks male mice exposed 240r gamma radiation.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/mice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mice mortality data — mice","text":"","code":"data(mice)"},{"path":"http://ousuga.github.io/RelDists/reference/mice.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mice mortality data — mice","text":"vector 208 data points.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/mice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mice mortality data — mice","text":"","code":"data(mice) hist(mice, main=\"\", xlab=\"Time (weeks)\", freq=FALSE) lines(density(mice), col=\"blue\", lwd=2)"},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"Marshall-Olkin Extended Inverse Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"","code":"MOEIW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"Returns gamlss.family object can used fit MOEIW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"Marshall-Olkin Extended Inverse Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu x^{-(\\sigma + 1)} exp\\{{-\\mu x^{-\\sigma}}\\}}{\\{\\nu -(\\nu-1) exp\\{{-\\mu x ^{-\\sigma}}\\} \\}^{2}},\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"Okasha, H. M., El-Baz, . H., Tarabia, . M. K., & Basheer, . M. (2017). Extended inverse Weibull distribution reliability application. Journal Egyptian Mathematical Society, 25(3), 343-349.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEIW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Extended Inverse Weibull family — MOEIW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu set.seed(123456) y <- rMOEIW(n=100, mu=0.6, sigma=1.7, nu=0.3)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family=\"MOEIW\",               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what=\"mu\")) #> (Intercept)  #>   0.4336193  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>    1.807662  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.4693823   # Example 2 # Generating random values under some model  # A function to simulate a data set with Y ~ MOEIW gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu    <- exp(-2.02 + 3 * x1) # 0.60 approximately   sigma <- exp(2.23 - 2 * x2)  # 3.42 approximately   nu    <- 2   y <- rMOEIW(n=n, mu=mu, sigma=sigma, nu=nu)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(123) dat <- gendat(n=100)  mod <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~1,                family=MOEIW, data=dat,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   -1.852971    2.792687  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    2.136396   -1.811521  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.683432"},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Extended Weibull family — MOEW","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"Marshall-Olkin Extended Weibull family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"","code":"MOEW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"Returns gamlss.family object can used fit MOEW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"Marshall-Olkin Extended Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu (\\nu x)^{\\sigma - 1} exp\\{{-(\\nu x )^{\\sigma}}\\}}{\\{1-(1-\\mu) exp\\{{-(\\nu x )^{\\sigma}}\\} \\}^{2}},\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Ghitany, M. E., Al-Hussaini, E. K., & Al-Jarallah, R. . (2005). Marshall–Olkin extended Weibull distribution application censored data. Journal Applied Statistics, 32(10), 1025-1034.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOEW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Extended Weibull family — MOEW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rMOEW(n=400, mu=0.5, sigma=0.7, nu=1)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='MOEW',               control=gamlss.control(n.cyc=5000, trace=FALSE)) #> Error in gamlss(y ~ 1, sigma.fo = ~1, nu.fo = ~1, family = \"MOEW\", control = gamlss.control(n.cyc = 5000,     trace = FALSE)): response variable out of range  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> Error: object 'mod' not found exp(coef(mod, what='sigma')) #> Error: object 'mod' not found exp(coef(mod, what='nu')) #> Error: object 'mod' not found  # Example 2 # Generating random values under some model n <- 500 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(-1.20 + 3 * x1) sigma <- exp(0.84 - 2 * x2) nu <- 1 x <- rMOEW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=MOEW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  -0.4955676   1.3942922  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.021122   -2.368124  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.9078116"},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":null,"dir":"Reference","previous_headings":"","what":"The Marshall-Olkin Kappa family — MOK","title":"The Marshall-Olkin Kappa family — MOK","text":"Marshall-Olkin Kappa family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Marshall-Olkin Kappa family — MOK","text":"","code":"MOK(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\", tau.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Marshall-Olkin Kappa family — MOK","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter. tau.link defines tau.link, \"log\" link default tau parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Marshall-Olkin Kappa family — MOK","text":"Returns gamlss.family object can used fit MOK distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Marshall-Olkin Kappa family — MOK","text":"Marshall-Olkin Kappa distribution parameters mu, sigma, nu tau density given \\(f(x)=\\frac{\\tau\\frac{\\mu\\nu}{\\sigma}\\left(\\frac{x}{\\sigma}\\right)^{\\nu-1} \\left(\\mu+\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}\\right)^{-\\frac{\\mu+1}{\\mu}}}{\\left(\\tau+(1-\\tau)\\left(\\frac{\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}}{\\mu+\\left(\\frac{x}{\\sigma}\\right)^{\\mu\\nu}}\\right)^{\\frac{1}{\\mu}}\\right)^2}\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Marshall-Olkin Kappa family — MOK","text":"Javed, M., Nawaz, T., & Irfan, M. (2019). Marshall-Olkin kappa distribution: properties applications. Journal King Saud University-Science, 31(4), 684-691.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Marshall-Olkin Kappa family — MOK","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MOK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Marshall-Olkin Kappa family — MOK","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma, nu and tau y <- rMOK(n=100, mu = 1, sigma = 3.5, nu = 3, tau = 2)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, tau.fo=~1, family=MOK,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma, nu and tau # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>   0.5221842  exp(coef(mod, what='sigma')) #> (Intercept)  #>    4.096174  exp(coef(mod, what='nu')) #> (Intercept)  #>    4.319638  exp(coef(mod, what='tau')) #> (Intercept)  #>   0.8688688   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(0.5 + x1) sigma <- exp(0.8 + x2) nu <- 1 tau <- 0.5 x <- rMOK(n=n, mu, sigma, nu, tau)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, tau.fo=~1, family=MOK,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   0.4642051   2.2925826  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.021868    1.107709  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>   0.9657106  exp(coef(mod, what=\"tau\")) #> (Intercept)  #>   0.4504914"},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Modified Weibull family — MW","title":"The Modified Weibull family — MW","text":"#' Modified Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Modified Weibull family — MW","text":"","code":"MW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Modified Weibull family — MW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Modified Weibull family — MW","text":"Returns gamlss.family object can used fit MW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Modified Weibull family — MW","text":"Modified Weibull distribution parameters mu, sigma nu density given \\(f(x) = \\mu (\\sigma + \\nu x) x^(\\sigma - 1) \\exp(\\nu x) \\exp(-\\mu x^(\\sigma) \\exp(\\nu x)),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma \\geq 0\\) \\(\\nu \\geq 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Modified Weibull family — MW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Lai, C. D., Xie, M., & Murthy, D. N. P. (2003). modified Weibull distribution. IEEE Transactions reliability, 52(1), 33-37.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Modified Weibull family — MW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/MW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Modified Weibull family — MW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rMW(n=100, mu = 2, sigma = 1.5, nu = 0.2)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family= 'MW',                control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    1.935706  exp(coef(mod, what='sigma')) #> (Intercept)  #>    1.512932  exp(coef(mod, what='nu')) #> (Intercept)  #>   0.2942034   # Example 2 # Generating random values under some model n     <- 200 x1    <- rpois(n, lambda=2) x2    <- runif(n) mu    <- exp(3 -1 * x1) sigma <- exp(2 - 2 * x2) nu    <- 0.2 x     <- rMW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, mu.fo=~x1, sigma.fo=~x2, nu.fo=~1, family=MW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   3.0337995  -0.9488072  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    2.096852   -2.077852  coef(mod, what='nu') #> (Intercept)  #>   -2.612791"},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Custimized region search for odd Weibull distribution — myOW_region","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"function can used modify OW gamlss.family object order  set customized region search gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"","code":"myOW_region(family = OW, valid.values = \"auto\", initVal)"},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"family OW family. arguments allows user modify input arguments family, like link functions. valid.values list character elements specifying region sigma /nu. See Details Examples section learn use. initVal initValOW object generated initValuesOW function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"Returns gamlss.family object can used fit OW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"function created help users fit OW distribution easily bounding parametric space sigma nu. valid.values must defined list characters containing call function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/myOW_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custimized region search for odd Weibull distribution — myOW_region","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rOW(n=200, mu=0.2, sigma=4, nu=0.05)  # Custom search region myvalues <- list(sigma=\"all(sigma > 1)\",                  nu=\"all(nu < 1) & all(nu < 1)\")  my_initial_guess <- initValuesOW(formula=y~1) summary(my_initial_guess) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 5 #> nu = 0.1 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu < 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Bathtub  # OW family modified with 'myOW_region' require(gamlss) myOW <- myOW_region(valid.values=myvalues, initVal=my_initial_guess) mod1 <- gamlss(y~1, sigma.fo=~1, nu.fo=~1,                 sigma.start=param.startOW('sigma', my_initial_guess),                 nu.start=param.startOW('nu', my_initial_guess),                control=gamlss.control(n.cyc=300, trace=FALSE),                family=myOW)  exp(coef(mod1, what='mu')) #> (Intercept)  #>    0.176485  exp(coef(mod1, what='sigma')) #> (Intercept)  #>    4.775956  exp(coef(mod1, what='nu')) #> (Intercept)  #>  0.03925689   # Example 2 # Same example using another link function and using 'myOW_region' # in the argument 'family' mod2 <- gamlss(y~1, sigma.fo=~1, nu.fo=~1,                 sigma.start=2, nu.start=0.1,                control=gamlss.control(n.cyc=300, trace=FALSE),                family=myOW_region(family=OW(sigma.link='identity'),                                   valid.values=myvalues,                                   initVal=my_initial_guess))  exp(coef(mod2, what='mu')) #> (Intercept)  #>   0.1764757  coef(mod2, what='sigma') #> (Intercept)  #>    4.776293  exp(coef(mod2, what='nu')) #> (Intercept)  #>  0.03925474"},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":null,"dir":"Reference","previous_headings":"","what":"New Exponentiated Exponential family — NEE","title":"New Exponentiated Exponential family — NEE","text":"function NEE() defines New Exponentiated Exponential distribution, two parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Exponentiated Exponential family — NEE","text":"","code":"NEE(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New Exponentiated Exponential family — NEE","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"logit\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New Exponentiated Exponential family — NEE","text":"Returns gamlss.family object can used fit NEE distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"New Exponentiated Exponential family — NEE","text":"New Exponentiated Exponential distribution parameters mu sigma density given \\(f(x | \\mu, \\sigma) = \\log(2^\\sigma) \\mu \\exp(-\\mu x) (1-\\exp(-\\mu x))^{\\sigma-1} 2^{(1-\\exp(-\\mu x))^\\sigma}, \\) \\(x>0\\), \\(\\mu>0\\) \\(\\sigma>0\\). Note: implementation changed original parameters \\(\\theta\\) \\(\\mu\\) \\(\\alpha\\) \\(\\sigma\\), implement distribution within gamlss framework.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"New Exponentiated Exponential family — NEE","text":"Hassan, Anwar, . H. Dar, M. . Lone. \"New Class Probability Distributions Application Engineering Data.\" Pakistan Journal Statistics Operation Research 20.2 (2024): 217-231.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/NEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Exponentiated Exponential family — NEE","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma y <- rNEE(n=500, mu=2.5, sigma=3.5)  # Fitting the model require(gamlss)  mod1 <- gamlss(y~1, sigma.fo=~1, family=NEE,                control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 601.6176   # Extracting the fitted values for mu, sigma # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>    2.446043  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    3.204727   # Example 2 # Generating random values under some model gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(-0.2 + 1.5 * x1)   sigma <- exp(1 - 0.7 * x2)   y <- rNEE(n=n, mu, sigma)   data.frame(y=y, x1=x1, x2=x2) }  set.seed(123) datos <- gendat(n=500)  mod2 <- gamlss(y~x1, sigma.fo=~x2, family=NEE, data=datos,                control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 836.8611  #> GAMLSS-RS iteration 2: Global Deviance = 828.078  #> GAMLSS-RS iteration 3: Global Deviance = 825.3264  #> GAMLSS-RS iteration 4: Global Deviance = 824.4661  #> GAMLSS-RS iteration 5: Global Deviance = 824.1988  #> GAMLSS-RS iteration 6: Global Deviance = 824.1156  #> GAMLSS-RS iteration 7: Global Deviance = 824.0895  #> GAMLSS-RS iteration 8: Global Deviance = 824.0813  #> GAMLSS-RS iteration 9: Global Deviance = 824.0787  #> GAMLSS-RS iteration 10: Global Deviance = 824.078   summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"NEE\", \"New Exponentiated Exponential\")  #>  #> Call:   #> gamlss(formula = y ~ x1, sigma.formula = ~x2, family = NEE, data = datos,   #>     control = gamlss.control(n.cyc = 5000, trace = TRUE))  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.17039    0.05690  -2.995  0.00288 **  #> x1           1.50548    0.09929  15.163  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.06151    0.09229  11.502  < 2e-16 *** #> x2          -0.77427    0.16406  -4.719 3.08e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  500  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  496  #>                       at cycle:  10  #>   #> Global Deviance:     824.078  #>             AIC:     832.078  #>             SBC:     848.9364  #> ******************************************************************  # Example 3  -------------------------------------------------- # Obtained from Hassan (2024) page 226 # The data set consists of 63 observations of the gauge lengths of 10mm.   y <- c(1.901, 2.132, 2.203, 2.228, 2.257, 2.350, 2.361, 2.396, 2.397,         2.445, 2.454, 2.474, 2.518, 2.522, 2.525, 2.532,  2.575, 2.614,         2.616, 2.618, 2.624, 2.659, 2.675, 2.738, 2.740, 2.856, 2.917,         2.928, 2.937, 2.937, 2.977, 2.996,  3.030, 3.125, 3.139, 3.145,         3.220, 3.223, 3.235, 3.243, 3.264, 3.272, 3.294, 3.332, 3.346,         3.377, 3.408, 3.435,  3.493, 3.501, 3.537, 3.554, 3.562, 3.628,         3.852, 3.871, 3.886, 3.971, 4.024, 4.027, 4.225, 4.395, 5.020)  mod3 <- gamlss(y~1, family=NEE) #> GAMLSS-RS iteration 1: Global Deviance = 112.7573   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod3, what=\"mu\")) #> (Intercept)  #>    2.076862  exp(coef(mod3, what=\"sigma\")) #> (Intercept)  #>    255.2289   # Hist and estimated pdf hist(y, freq=FALSE, ylim=c(0, 0.7)) curve(dNEE(x, mu=2.076862, sigma=255.2289),        add=TRUE, col=\"tomato\", lwd=2)   # Empirical cdf and estimated ecdf plot(ecdf(y)) curve(pNEE(x, mu=2.076862, sigma=255.2289),        add=TRUE, col=\"tomato\", lwd=2)  # QQplot qqplot(y, rNEE(n=length(y), mu=2.076862, sigma=255.2289), col=\"tomato\") qqline(y, distribution=function(p) qNEE(p, mu=2.076862, sigma=255.2289))   # Example 4  -------------------------------------------------- # Obtained from Hassan (2024) page 226 # The dataset was reported by Bader and Priest (1982) on failure  # stresses (in GPa) of 65 single carbon fibers of lengths 50 mm  y <- c(0.564, 0.729, 0.802, 0.95, 1.053, 1.111, 1.115, 1.194, 1.208,        1.216, 1.247, 1.256, 1.271, 1.277, 1.305, 1.313, 1.348,         1.39, 1.429, 1.474, 1.49, 1.503, 1.52, 1.522, 1.524, 1.551,         1.551, 1.609, 1.632, 1.632, 1.676, 1.684, 1.685, 1.728, 1.74,         1.761, 1.764, 1.785, 1.804, 1.816, 1.824, 1.836, 1.879, 1.883,         1.892, 1.898, 1.934, 1.947, 1.976, 2.02, 2.023, 2.05, 2.059,         2.068, 2.071, 2.098, 2.13, 2.204, 2.317, 2.334, 2.34, 2.346,         2.378, 2.483, 2.269)  mod4 <- gamlss(y~1, family=NEE) #> GAMLSS-RS iteration 1: Global Deviance = 87.2635   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod4, what=\"mu\")) #> (Intercept)  #>    2.400515  exp(coef(mod4, what=\"sigma\")) #> (Intercept)  #>    25.15236   hist(y, freq=FALSE) curve(dNEE(x, mu=2.400515, sigma=25.15236),        add=TRUE, col=\"tomato\", lwd=2)   # Empirical cdf and estimated ecdf plot(ecdf(y)) curve(pNEE(x, mu=2.400515, sigma=25.15236),        add=TRUE, col=\"tomato\", lwd=2)  # QQplot qqplot(y, rNEE(n=length(y), mu=2.400515, sigma=25.15236), col=\"tomato\") qqline(y, distribution=function(p) qNEE(p, mu=2.400515, sigma=25.15236))   # Example 5 ------------------------------------------------------------------- # 69 Observations of the gauge lengths of 20m. y <- c(1.312,1.314,1.479,1.552,1.700,1.803,1.861,1.865,1.944,1.958,1.966,1.997,        2.006,2.021,2.027,2.055, 2.063,2.098,2.140,2.179,2.224,2.240,2.253,2.270,        2.272,2.274,2.301,2.301,2.359,2.382,2.382,2.426, 2.434,2.435,2.478,2.490,        2.511,2.514,2.535,2.554,2.566,2.570,2.586,2.629,2.633,2.642,2.648,2.684,        2.697,2.726,2.770,2.773,2.800,2.809,2.818,2.821,2.848,2.880,2.954,3.012,        3.067,3.084,3.090,3.096, 3.128,3.233,3.433,3.585,3.585)  mod5 <- gamlss(y~1, sigma.fo=~1, family = NEE) #> GAMLSS-RS iteration 1: Global Deviance = 107.4186   # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod5, what=\"mu\")) #> (Intercept)  #>    2.197771  exp(coef(mod5, what=\"sigma\")) #> (Intercept)  #>    100.8888   hist(y, freq=FALSE) curve(dNEE(x, mu=2.197771, sigma=100.8888), add=TRUE,        col=\"tomato\", lwd=2)  # Empirical cdf and estimated ecdf plot(ecdf(y)) curve(pNEE(x, mu=2.197771, sigma=100.8888), add=TRUE,        col=\"tomato\", lwd=2)  # QQplot qqplot(y, rNEE(n=length(y), mu=2.197771, sigma=100.8888), col=\"tomato\") qqline(y, distribution=function(p) qNEE(p, mu=2.197771, sigma=100.8888))"},{"path":"http://ousuga.github.io/RelDists/reference/negllexw.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar function to obtain minus loglik for Ex-Wald — negllexw","title":"Auxiliar function to obtain minus loglik for Ex-Wald — negllexw","text":"function calculates minus loglik.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/negllexw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar function to obtain minus loglik for Ex-Wald — negllexw","text":"","code":"negllexw(p, x)"},{"path":"http://ousuga.github.io/RelDists/reference/negllexw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar function to obtain minus loglik for Ex-Wald — negllexw","text":"p vector parameters. x vector random sample.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/negllexw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliar function to obtain minus loglik for Ex-Wald — negllexw","text":"returns minus loglik.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Odd Weibull family — OW","title":"The Odd Weibull family — OW","text":"function OW() defines Odd Weibull distribution, three parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Odd Weibull family — OW","text":"","code":"OW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Odd Weibull family — OW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Odd Weibull family — OW","text":"Returns gamlss.family object can used fit OW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Odd Weibull family — OW","text":"odd Weibull parameters mu, sigma nu density given \\(f(t) = \\left( \\frac{\\sigma\\nu}{t} \\right) (\\mu t)^\\sigma      e^{(\\mu t)^\\sigma} \\left(e^{(\\mu t)^{\\sigma}}-1\\right)^{\\nu-1}      \\left[ 1 + \\left(e^{(\\mu t)^{\\sigma}}-1\\right)^\\nu \\right]^{-2}\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Odd Weibull family — OW","text":"Cooray, K. (2006). Generalization Weibull distribution: odd Weibull family. Statistical Modelling, 6(3), 265-277.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Odd Weibull family — OW","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/OW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Odd Weibull family — OW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rOW(n=200, mu=0.1, sigma=7, nu = 1.1)  # Fitting the model require(gamlss) mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family=\"OW\",               control=gamlss.control(n.cyc=500, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what=\"mu\")) #> (Intercept)  #>  0.09838922  exp(coef(mod, what=\"sigma\")) #> (Intercept)  #>    7.323577  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.041076   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n) x2 <- runif(n) x3 <- runif(n) mu <- exp(1.2 + 2 * x1) sigma <- 2.12 + 3 * x2 nu <- exp(0.2 - x3) y <- rOW(n=n, mu, sigma, nu)  mod <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,                family=OW(sigma.link=\"identity\"),                control=gamlss.control(n.cyc=300, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.266581    1.886269  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.760193    3.474991  coef(mod, what=\"nu\") #> (Intercept)          x3  #>   0.2665299  -0.9585126"},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values extraction for Odd Weibull distribution — param.startOW","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"function can used extract initial values found empirical time test transform (TTT)  initValuesOW function. used parameter estimation OW distribution.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"","code":"param.startOW(param, initValOW)"},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"param character used specify parameter required. can take values \"sigma\" \"nu\". initValOW initValOW object generated initValuesOW function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"length-one vector numeric value corresponding initial value parameter specified param extracted initValuesOW object specified initValOW input argument.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"function just gets initial values computed initValuesOW OW family. must called sigma.start nu.start arguments gamlss function. function useful user want set start values automatically TTT plot. See example illustration.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/param.startOW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initial values extraction for Odd Weibull distribution — param.startOW","text":"","code":"# Random data generation (OW distributed) y <- rOW(n=500, mu=0.05, sigma=0.6, nu=2)  # Initial values with TTT plot iv <- initValuesOW(formula = y ~ 1) summary(iv) #> -------------------------------------------------------------------- #> Initial Values #> sigma = 2 #> nu = 6 #> -------------------------------------------------------------------- #> Search Regions #> For sigma: all(sigma > 1) #> For nu: all(nu > 1/sigma) #> -------------------------------------------------------------------- #> Hazard shape: Increasing #> Warning: Non-parametric estimate for Empirical TTT is irregular. #> Please, use the 'plot()' method to see the TTT shape and set the search region manually in 'gamlss()' if there is no conincidence between 'Hazard_Shape()' and 'plot()'. Visit 'OW distribution' vignette to get further information.  # This data is from unimodal hazard # See TTT estimate from sample plot(iv, legend_options=list(pos=1.03)) #> Warning: The `legend_options` argument of `plot.HazardShape()` is deprecated as of #> EstimationTools 4.0.0. #> ℹ Please use `plot.HazardShape()` instead.   # See the true hazard curve(hOW(x, mu=0.05, sigma=0.6, nu=2), to=100, lwd=3, ylab=\"h(x)\")   # Finally, we fit the model require(gamlss) con.out <- gamlss.control(n.cyc = 300, trace = FALSE) con.in <- glim.control(cyc = 300)  (sigma.start <- param.startOW(\"sigma\", iv)) #> [1] 2 (nu.start <- param.startOW(\"nu\", iv)) #> [1] 6  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, control=con.out, i.control=con.in,               family=myOW_region(OW(sigma.link=\"identity\", nu.link=\"identity\"),                                  valid.values=\"auto\", iv),               sigma.start=sigma.start, nu.start=nu.start)  # Estimates are close to actual values (mu <- exp(coef(mod, what = \"mu\"))) #> (Intercept)  #>  0.05753546  (sigma <- coef(mod, what = \"sigma\")) #> (Intercept)  #>   0.9050876  (nu <- coef(mod, what = \"nu\")) #> (Intercept)  #>    1.328676"},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":null,"dir":"Reference","previous_headings":"","what":"The Power Lindley family — PL","title":"The Power Lindley family — PL","text":"Power Lindley distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Power Lindley family — PL","text":"","code":"PL(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Power Lindley family — PL","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Power Lindley family — PL","text":"Returns gamlss.family object can used fit PL distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Power Lindley family — PL","text":"Power Lindley Distribution parameters mu sigma density given \\(f(x) = \\frac{\\mu \\sigma^2}{\\sigma + 1} (1 + x^\\mu) x ^ {\\mu - 1} \\exp({-\\sigma x ^\\mu}),\\) x > 0.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Power Lindley family — PL","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Ghitany, M. E., Al-Mutairi, D. K., Balakrishnan, N., & Al-Enezi, L. J. (2013). Power Lindley distribution associated inference. Computational Statistics & Data Analysis, 64, 20-33.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Power Lindley family — PL","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/PL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Power Lindley family — PL","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma  y <- rPL(n=100, mu=1.5, sigma=0.2)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, family= 'PL',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod, 'mu')) #> (Intercept)  #>    1.458269  exp(coef(mod, 'sigma')) #> (Intercept)  #>   0.2094054   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(1.2 - 2 * x1) sigma <- exp(0.8 - 3 * x2) x <- rPL(n=n, mu, sigma)  mod <- gamlss(x~x1, sigma.fo=~x2, family=PL,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.041615   -1.858229  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.663505   -4.480948"},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":null,"dir":"Reference","previous_headings":"","what":"The Quasi XGamma Poisson family — QXGP","title":"The Quasi XGamma Poisson family — QXGP","text":"Quasi XGamma Poisson family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Quasi XGamma Poisson family — QXGP","text":"","code":"QXGP(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Quasi XGamma Poisson family — QXGP","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Quasi XGamma Poisson family — QXGP","text":"Returns gamlss.family object can used fit QXGP distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Quasi XGamma Poisson family — QXGP","text":"Quasi XGamma Poisson distribution parameters mu, sigma nu density given \\(f(x)= K(\\mu, \\sigma, \\nu)(\\frac {\\sigma^{2} x^{2}}{2} + \\mu)  exp(\\frac{\\nu exp(-\\sigma x)(1 + \\mu + \\sigma x + \\frac {\\sigma^{2}x^{2}}{2})}{1+\\mu} - \\sigma x),\\) \\(x > 0\\), \\(\\mu> 0\\), \\(\\sigma> 0\\), \\(\\nu> 1\\). \\(K(\\mu, \\sigma, \\nu) = \\frac{\\nu \\sigma}{(exp(\\nu)-1)(1+\\mu)}\\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Quasi XGamma Poisson family — QXGP","text":"Sen, S., Korkmaz, M. Ç., & Yousof, H. M. (2018). quasi XGamma-Poisson distribution: properties application. Istatistik Journal Turkish Statistical Association, 11(3), 65-76.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Quasi XGamma Poisson family — QXGP","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/QXGP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Quasi XGamma Poisson family — QXGP","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rQXGP(n=200, mu=4, sigma=2, nu=3)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='QXGP',               control=gamlss.control(n.cyc=5000, trace=FALSE)) #> Error in gamlss(y ~ 1, sigma.fo = ~1, nu.fo = ~1, family = \"QXGP\", control = gamlss.control(n.cyc = 5000,     trace = FALSE)): response variable out of range  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> Error: object 'mod' not found exp(coef(mod, what='sigma')) #> Error: object 'mod' not found exp(coef(mod, what='nu')) #> Error: object 'mod' not found  # Example 2 # Generating random values under some model n <- 2000 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(-2.19 + 3 * x1) sigma <- exp(1 - 2 * x2) nu <- 1 x <- rQXGP(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=QXGP,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   -1.553292    3.344201  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   0.9028154  -1.6545796  exp(coef(mod, what=\"nu\")) #>  (Intercept)  #> 2.220444e-16"},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Reflected Weibull family — RW","title":"The Reflected Weibull family — RW","text":"Reflected Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Reflected Weibull family — RW","text":"","code":"RW(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Reflected Weibull family — RW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Reflected Weibull family — RW","text":"Returns gamlss.family object can used fit RW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Reflected Weibull family — RW","text":"Reflected Weibull Distribution parameters mu sigma density given \\(f(y) = \\mu\\sigma (-y) ^{\\sigma - 1} e ^ {-\\mu(-y)^\\sigma},\\) y < 0","code":""},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Reflected Weibull family — RW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Cohen, . C. (1973). reflected Weibull distribution. Technometrics, 15(4), 867-873.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Reflected Weibull family — RW","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/RW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Reflected Weibull family — RW","text":"","code":"# Example 1 # Generating some random values with # known mu and sigma  y <- rRW(n=100, mu=1, sigma=1)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, family= 'RW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu and sigma # using the inverse link function exp(coef(mod, 'mu')) #> (Intercept)  #>    1.108548  exp(coef(mod, 'sigma')) #> (Intercept)  #>    1.028627   # Example 2 # Generating random values under some model n <- 200 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(1.5 - 1.5 * x1) sigma <- exp(2 - 2 * x2) x <- rRW(n=n, mu, sigma)  mod <- gamlss(x~x1, sigma.fo=~x2, family=RW,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>    1.954567   -2.425330  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    2.166813   -2.234059"},{"path":"http://ousuga.github.io/RelDists/reference/summary.initValOW.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of initValOW objects — summary.initValOW","title":"Summary of initValOW objects — summary.initValOW","text":"summary method displays initial values search regions OW family.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/summary.initValOW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of initValOW objects — summary.initValOW","text":"","code":"# S3 method for class 'initValOW' summary(object, ...)"},{"path":"http://ousuga.github.io/RelDists/reference/summary.initValOW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of initValOW objects — summary.initValOW","text":"object object class initVal, generated initValuesOW. ... extra arguments","code":""},{"path":"http://ousuga.github.io/RelDists/reference/summary.initValOW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of initValOW objects — summary.initValOW","text":"return value, just prints console initial values search regions \\(sigma\\) \\(nu\\) OW distribution (see dOW).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/summary.initValOW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of initValOW objects — summary.initValOW","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":null,"dir":"Reference","previous_headings":"","what":"The Sarhan and Zaindin's Modified Weibull family — SZMW","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"Sarhan Zaindin's Modified Weibull distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"","code":"SZMW(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"Returns gamlss.family object can used fit SZMW distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"Sarhan Zaindin's Modified Weibull distribution parameters mu, sigma nu density given \\(f(x)=(\\mu + \\sigma \\nu x^(\\nu - 1)) \\exp(- \\mu x - \\sigma x^\\nu),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"Almalki, S. J., & Nadarajah, S. (2014). Modifications Weibull distribution: review. Reliability Engineering & System Safety, 124, 32-55. Sarhan, . M., & Zaindin, M. (2009). Modified Weibull distribution. APPS. Applied Sciences, 11, 123-136.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/SZMW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Sarhan and Zaindin's Modified Weibull family — SZMW","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rSZMW(n=100, mu = 1, sigma = 1, nu = 1.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='SZMW',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #> 0.000892496  exp(coef(mod, what='sigma')) #> (Intercept)  #>    1.711164  exp(coef(mod, what='nu')) #> (Intercept)  #>    1.261649   # Example 2 # Generating random values under some model n     <- 200 x1    <- runif(n) x2    <- runif(n) mu    <- exp(-1.6 * x1) sigma <- exp(0.9 - 1 * x2) nu    <- 1.5 x     <- rSZMW(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, mu.fo=~x1, sigma.fo=~x2, nu.fo=~1, family=SZMW,               control=gamlss.control(n.cyc=50000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   0.2936074  -1.5396351  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>   0.5925007  -0.7325553  coef(mod, what='nu') #> (Intercept)  #>   0.5500317"},{"path":"http://ousuga.github.io/RelDists/reference/uandv.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar function for the Ex-Wald distribution — uandv","title":"Auxiliar function for the Ex-Wald distribution — uandv","text":"function auxiliar function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/uandv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar function for the Ex-Wald distribution — uandv","text":"","code":"uandv(   x,   y,   firstblock = 20,   block = 0,   tol = .Machine$double.eps^(2/3),   maxseries = 20 )"},{"path":"http://ousuga.github.io/RelDists/reference/uandv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar function for the Ex-Wald distribution — uandv","text":"x value x. y value y. block value. tol tolerance. maxseries maximum value series.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/uandv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Auxiliar function for the Ex-Wald distribution — uandv","text":"returns vector starting values.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":null,"dir":"Reference","previous_headings":"","what":"The Wald family — WALD","title":"The Wald family — WALD","text":"function WALD() defines wALD distribution, two-parameter continuous distribution gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Wald family — WALD","text":"","code":"WALD(mu.link = \"log\", sigma.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Wald family — WALD","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Wald family — WALD","text":"Returns gamlss.family object can used fit WALD distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Wald family — WALD","text":"Wald distribution parameters \\(\\mu\\) \\(sigma\\) density given \\(\\operatorname{f}(x |\\mu, \\sigma)=\\frac{\\sigma}{\\sqrt{2 \\pi x^3}} \\exp \\left[-\\frac{(\\sigma-\\mu x)^2}{2x}\\right ], x>0 \\)","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Wald family — WALD","text":"Heathcote, . (2004). Fitting Wald ex-Wald distributions response time data: example using functions S-PLUS package. Behavior Research Methods, Instruments, & Computers, 36, 678-694.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Wald family — WALD","text":"Sofia Cuartas García, scuartasg@unal.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WALD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Wald family — WALD","text":"","code":"# Example 1 # Generating random values with # known mu and sigma require(gamlss) mu <- 1.5 sigma <- 4.0  y <- rWALD(10000, mu, sigma)  mod1 <- gamlss(y~1, sigma.fo=~1,  family=\"WALD\",                control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 27669.01  #> GAMLSS-RS iteration 2: Global Deviance = 27668.59  #> GAMLSS-RS iteration 3: Global Deviance = 27668.34  #> GAMLSS-RS iteration 4: Global Deviance = 27668.21  #> GAMLSS-RS iteration 5: Global Deviance = 27668.13  #> GAMLSS-RS iteration 6: Global Deviance = 27668.08  #> GAMLSS-RS iteration 7: Global Deviance = 27668.06  #> GAMLSS-RS iteration 8: Global Deviance = 27668.04  #> GAMLSS-RS iteration 9: Global Deviance = 27668.03  #> GAMLSS-RS iteration 10: Global Deviance = 27668.03  #> GAMLSS-RS iteration 11: Global Deviance = 27668.03  #> GAMLSS-RS iteration 12: Global Deviance = 27668.03  #> GAMLSS-RS iteration 13: Global Deviance = 27668.02   exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>    1.513483  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>    4.046919   # Example 2 # Generating random values under some model  # A function to simulate a data set with Y ~ WALD gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(0.75 - 0.69 * x1)   # Approx 1.5   sigma <- exp(0.5 - 0.64 * x2) # Approx 1.20   y <- rWALD(n, mu, sigma)   data.frame(y=y, x1=x1, x2=x2) }  dat <- gendat(n=200)  mod2 <- gamlss(y~x1, sigma.fo=~x2, family=WALD, data=dat,                 control=gamlss.control(n.cyc=5000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 220.34  #> GAMLSS-RS iteration 2: Global Deviance = 218.9899  #> GAMLSS-RS iteration 3: Global Deviance = 218.7139  #> GAMLSS-RS iteration 4: Global Deviance = 218.6434  #> GAMLSS-RS iteration 5: Global Deviance = 218.628  #> GAMLSS-RS iteration 6: Global Deviance = 218.6233  #> GAMLSS-RS iteration 7: Global Deviance = 218.6217  #> GAMLSS-RS iteration 8: Global Deviance = 218.6214   summary(mod2) #> Warning: summary: vcov has failed, option qr is used instead #> ****************************************************************** #> Family:  c(\"WALD\", \"Wald\")  #>  #> Call:  gamlss(formula = y ~ x1, sigma.formula = ~x2, family = WALD,   #>     data = dat, control = gamlss.control(n.cyc = 5000, trace = TRUE))  #>  #> Fitting method: RS()  #>  #> ------------------------------------------------------------------ #> Mu link function:  log #> Mu Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   0.8445     0.1017   8.306 1.54e-14 *** #> x1           -0.8676     0.2003  -4.332 2.34e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> Sigma link function:  log #> Sigma Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.62330    0.07169   8.694 1.33e-15 *** #> x2          -0.85636    0.12141  -7.054 2.85e-11 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ------------------------------------------------------------------ #> No. of observations in the fit:  200  #> Degrees of Freedom for the fit:  4 #>       Residual Deg. of Freedom:  196  #>                       at cycle:  8  #>   #> Global Deviance:     218.6214  #>             AIC:     226.6214  #>             SBC:     239.8147  #> ******************************************************************"},{"path":"http://ousuga.github.io/RelDists/reference/wald_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values for WALD — wald_start","title":"Initial values for WALD — wald_start","text":"function generates initial values parameters.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/wald_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values for WALD — wald_start","text":"","code":"wald_start(y)"},{"path":"http://ousuga.github.io/RelDists/reference/wald_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values for WALD — wald_start","text":"y vector response variable.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/wald_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial values for WALD — wald_start","text":"returns vector starting values.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weibull Geometric family — WG","title":"The Weibull Geometric family — WG","text":"Weibull Geometric distribution","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weibull Geometric family — WG","text":"","code":"WG(mu.link = \"log\", sigma.link = \"log\", nu.link = \"logit\")"},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weibull Geometric family — WG","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weibull Geometric family — WG","text":"Returns gamlss.family object can used fit WG distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weibull Geometric family — WG","text":"weibull geometric distribution parameters mu, sigma nu density given \\(f(x) = (\\sigma \\mu^\\sigma (1-\\nu) x^(\\sigma - 1) \\exp(-(\\mu x)^\\sigma)) (1- \\nu \\exp(-(\\mu x)^\\sigma))^{-2},\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(0 < \\nu < 1\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weibull Geometric family — WG","text":"Barreto-Souza, W., de Morais, . L., & Cordeiro, G. M. (2011). Weibull-geometric distribution. Journal Statistical Computation Simulation, 81(5), 645-657.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weibull Geometric family — WG","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weibull Geometric family — WG","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rWG(n=100,  mu = 0.9, sigma = 2, nu = 0.5)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='WG',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    1.165723  exp(coef(mod, what='sigma')) #> (Intercept)  #>   0.9376154  exp(coef(mod, what='nu')) #> (Intercept)  #>    3.842801   # Example 2 # Generating random values under some model n     <- 200 x1    <- runif(n) x2    <- runif(n) mu    <- exp(- 0.2 * x1) sigma <- exp(1.2 - 1 * x2) nu    <- 0.5 x     <- rWG(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, mu.fo=~x1, sigma.fo=~x2, nu.fo=~1, family=WG,               control=gamlss.control(n.cyc=50000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>  -0.5450823   0.7100188  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>  -0.1460879   0.5034753  coef(mod, what='nu') #> (Intercept)  #>    1.738279"},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weigted Generalized Exponential-Exponential family — WGEE","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"Weigted Generalized Exponential-Exponential family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"","code":"WGEE(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"Returns gamlss.family object can used fit WGEE distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"Weigted Generalized Exponential-Exponential distribution parameters mu, sigma nu density given \\(f(x)= \\sigma \\nu \\exp(-\\nu x) (1 - \\exp(-\\nu x))^{\\sigma - 1} (1 - \\exp(-\\mu \\nu x)) / 1 - \\sigma B(\\mu + 1, \\sigma),\\) \\(x > 0\\), \\(\\mu > 0\\), \\(\\sigma > 0\\) \\(\\nu > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"Mahdavi, . (2015). Two weighted distributions generated exponential distribution. Journal Mathematical Extension, 9, 1-12.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"Johan David Marin Benjumea, johand.marin@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WGEE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weigted Generalized Exponential-Exponential family — WGEE","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and  nu  y <- rWGEE(n=1000, mu = 5, sigma = 0.5, nu = 1)  # Fitting the model require(gamlss)  mod <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family='WGEE',               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu   # using the inverse link function exp(coef(mod, what='mu')) #> (Intercept)  #>    21.99207  exp(coef(mod, what='sigma')) #> (Intercept)  #>    1.021834  exp(coef(mod, what='nu')) #> (Intercept)  #>    1.088654   # Example 2 # Generating random values under some model n <- 500 x1 <- runif(n, min=0.4, max=0.6) x2 <- runif(n, min=0.4, max=0.6) mu <- exp(2 - x1) sigma <- exp(1 - 3*x2) nu <- 1 x <- rWGEE(n=n, mu, sigma, nu)  mod <- gamlss(x~x1, sigma.fo=~x2, nu.fo=~1, family=WGEE,               control=gamlss.control(n.cyc=50000, trace=FALSE))  coef(mod, what=\"mu\") #> (Intercept)          x1  #>   2.2399479  -0.6694743  coef(mod, what=\"sigma\") #> (Intercept)          x2  #>    1.326692   -2.563950  exp(coef(mod, what=\"nu\")) #> (Intercept)  #>    1.237174"},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weibull Poisson family — WP","title":"The Weibull Poisson family — WP","text":"Weibull Poisson family","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Weibull Poisson family — WP","text":"","code":"WP(mu.link = \"log\", sigma.link = \"log\", nu.link = \"log\")"},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Weibull Poisson family — WP","text":"mu.link defines mu.link, \"log\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu parameter.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Weibull Poisson family — WP","text":"Returns gamlss.family object can used fit WP distribution gamlss() function.","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weibull Poisson family — WP","text":"Weibull Poisson distribution parameters mu, sigma nu density given \\(f(x) = \\frac{\\mu \\sigma \\nu e^{-\\nu}} {1-e^{-\\nu}} x^{\\mu-1} \\exp({-\\sigma x^{\\mu}+\\nu \\exp({-\\sigma} x^{\\mu}) }),\\) \\(x > 0\\).","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Weibull Poisson family — WP","text":"Lu, Wanbo, Daimin Shi. \"new compounding life distribution: Weibull–Poisson distribution.\" Journal applied statistics 39.1 (2012): 21-38.","code":""},{"path":[]},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weibull Poisson family — WP","text":"Amylkar Urrea Montoya, amylkar.urrea@udea.edu.co","code":""},{"path":"http://ousuga.github.io/RelDists/reference/WP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weibull Poisson family — WP","text":"","code":"# Example 1 # Generating some random values with # known mu, sigma and nu y <- rWP(n=3000, mu=1.5, sigma=0.5, nu=0.5)  # Fitting the model require(gamlss)  mod1 <- gamlss(y~1, sigma.fo=~1, nu.fo=~1, family=WP,               control=gamlss.control(n.cyc=5000, trace=FALSE))  # Extracting the fitted values for mu, sigma and nu # using the inverse link function exp(coef(mod1, what=\"mu\")) #> (Intercept)  #>    1.531701  exp(coef(mod1, what=\"sigma\")) #> (Intercept)  #>   0.4718944  exp(coef(mod1, what=\"nu\")) #> (Intercept)  #>   0.6584522   # Example 2 # Generating random values for a regression model  # A function to simulate a data set with Y ~ WP gendat <- function(n) {   x1 <- runif(n)   x2 <- runif(n)   mu <- exp(-1.3 + 3.1 * x1)   sigma <- exp(0.9 - 3.2 * x2)   nu <- 0.5   y <- rWP(n=n, mu, sigma, nu)   data.frame(y=y, x1=x1, x2) }  set.seed(1234) dat <- gendat(n=100)  # Fitting the model mod2 <- NULL mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~1,                 family=WP, data=dat,               control=gamlss.control(n.cyc=5000, trace=FALSE))  coef(mod2, what=\"mu\") #> (Intercept)          x1  #>   -1.125264    3.013640  coef(mod2, what=\"sigma\") #> (Intercept)          x2  #>   0.9625944  -3.7192040  exp(coef(mod2, what=\"nu\")) #> (Intercept)  #>   0.9819208"}]
